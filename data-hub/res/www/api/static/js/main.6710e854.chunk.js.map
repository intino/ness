{
  "version": 3,
  "sources": [
    "utils.js",
    "components/TopBar.js",
    "plugins/CustomizePlugin.js",
    "index.js"
  ],
  "names": [
    "serializeSearch",
    "searchMap",
    "Object",
    "keys",
    "map",
    "k",
    "encodeURIComponent",
    "join",
    "parseSearch",
    "search",
    "window",
    "location",
    "params",
    "substr",
    "split",
    "i",
    "hasOwnProperty",
    "decodeURIComponent",
    "Topbar",
    "props",
    "context",
    "_this",
    "classCallCheck",
    "this",
    "possibleConstructorReturn",
    "getPrototypeOf",
    "call",
    "onUrlChange",
    "e",
    "value",
    "target",
    "setState",
    "url",
    "loadSpec",
    "specActions",
    "updateUrl",
    "download",
    "onUrlSelect",
    "href",
    "setSelectedUrl",
    "preventDefault",
    "setSearch",
    "spec",
    "name",
    "newUrl",
    "concat",
    "protocol",
    "host",
    "pathname",
    "history",
    "pushState",
    "replaceState",
    "selectedUrl",
    "urls",
    "getConfigs",
    "length",
    "forEach",
    "selectedIndex",
    "onFilterChange",
    "layoutActions",
    "updateFilter",
    "state",
    "specSelectors",
    "nextProps",
    "_this2",
    "configs",
    "primaryName",
    "link",
    "react_default",
    "a",
    "createElement",
    "key",
    "_this$props",
    "isLoading",
    "loadingStatus",
    "_getConfigs",
    "_ref",
    "custom",
    "title",
    "subtitle",
    "color",
    "background",
    "selectorBorder",
    "className",
    "style",
    "src",
    "alt",
    "htmlFor",
    "id",
    "disabled",
    "onChange",
    "borderColor",
    "_renderOptions",
    "React",
    "Component",
    "CustomizePlugin",
    "wrapComponents",
    "InfoUrl",
    "authorizeBtn",
    "statePlugins",
    "wrapSelectors",
    "allowTryItOutFor",
    "$",
    "getJSON",
    "config",
    "_url",
    "undefined",
    "_urls",
    "_primary",
    "primary",
    "document",
    "attr",
    "SwaggerUIBundle",
    "dom_id",
    "urls.primaryName",
    "deepLinking",
    "filter",
    "validatorUrl",
    "presets",
    "apis",
    "SwaggerUIStandalonePreset",
    "plugins",
    "DownloadUrl",
    "layout",
    "selectorBorderColor"
  ],
  "mappings": "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",
  "file": "static/js/main.6710e854.chunk.js",
  "sourcesContent": [
    "export const serializeSearch = (searchMap) => {\n    return Object.keys(searchMap).map(k => {\n        return encodeURIComponent(k) + \"=\" + encodeURIComponent(searchMap[k])\n    }).join(\"&\");\n}\n\nexport const parseSearch = () => {\n    let map = {};\n    let search = window.location.search;\n\n    if (!search) return {};\n\n    if (search !== \"\") {\n        let params = search.substr(1).split(\"&\")\n\n        for (let i in params) {\n            if (!params.hasOwnProperty(i)) {\n                continue;\n            }\n            i = params[i].split(\"=\");\n            map[decodeURIComponent(i[0])] = (i[1] && decodeURIComponent(i[1])) || \"\";\n        }\n    }\n    return map;\n}",
    "import './TopBar.css'\nimport React from 'react'\nimport PropTypes from 'prop-types'\n\nimport { parseSearch, serializeSearch } from '../utils'\n\nexport default class Topbar extends React.Component {\n\n    static propTypes = {\n        layoutActions: PropTypes.object.isRequired\n    }\n\n    constructor(props, context) {\n        super(props, context)\n        this.state = { url: props.specSelectors.url(), selectedIndex: 0 }\n    }\n\n    componentWillReceiveProps(nextProps) {\n        this.setState({ url: nextProps.specSelectors.url() })\n    }\n\n    onUrlChange = (e) => {\n        let { target: { value } } = e\n        this.setState({ url: value })\n    }\n\n    loadSpec = (url) => {\n        this.props.specActions.updateUrl(url)\n        this.props.specActions.download(url)\n    }\n\n    onUrlSelect = (e) => {\n        let url = e.target.value || e.target.href\n        this.loadSpec(url)\n        this.setSelectedUrl(url)\n        e.preventDefault()\n    }\n\n    setSearch = (spec) => {\n        let search = parseSearch()\n        search[\"urls.primaryName\"] = spec.name\n        const newUrl = `${window.location.protocol}//${window.location.host}${window.location.pathname}`\n        if (window && window.history && window.history.pushState) {\n            window.history.replaceState(null, \"\", `${newUrl}?${serializeSearch(search)}`)\n        }\n    }\n\n    setSelectedUrl = (selectedUrl) => {\n        const configs = this.props.getConfigs()\n        const urls = configs.urls || []\n\n        if (urls && urls.length) {\n            if (selectedUrl) {\n                urls.forEach((spec, i) => {\n                    if (spec.url === selectedUrl) {\n                        this.setState({ selectedIndex: i })\n                        this.setSearch(spec)\n                    }\n                })\n            }\n        }\n    }\n\n    componentWillMount() {\n        const configs = this.props.getConfigs()\n        const urls = configs.urls || []\n\n        if (urls && urls.length) {\n            let primaryName = configs[\"urls.primaryName\"]\n            if (primaryName) {\n                urls.forEach((spec, i) => {\n                    if (spec.name === primaryName) {\n                        this.setState({ selectedIndex: i })\n                    }\n                })\n            }\n        }\n    }\n\n    componentDidMount() {\n        const urls = this.props.getConfigs().urls || []\n\n        if (urls && urls.length) {\n            this.loadSpec(urls[this.state.selectedIndex].url)\n        }\n    }\n\n    onFilterChange = (e) => {\n        let { target: { value } } = e\n        this.props.layoutActions.updateFilter(value)\n    }\n\n    _renderOptions(urls) {\n        return urls.map((link, i) => (<option key={i} value={link.url}>{link.name}</option>));\n    }\n\n    render() {\n        let { specSelectors, getConfigs } = this.props;\n\n        let isLoading = specSelectors.loadingStatus() === \"loading\"\n\n        const { urls, custom } = getConfigs();\n        const { title, subtitle, color, background, selectorBorder } = custom || {};\n\n        return (\n            <div className=\"topbar\" style={{ background: background, color: color }}>\n                <div className=\"wrapper\">\n                    <div className=\"topbar-wrapper\">\n                        <div className=\"topbar-title\">\n                            <img src=\"./images/logo.png\" alt={title} />\n                            <div className=\"topbar-title-info\">\n                                <h1>{title}</h1>\n                                <span>{subtitle}</span>\n                            </div>\n                        </div>\n                        {\n                            urls &&\n                            urls.length > 1 &&\n                            (\n                                <form className=\"topbar-selector\">\n                                    <label className=\"select-label\" htmlFor=\"select\">\n                                        <select id=\"select\" disabled={isLoading} onChange={this.onUrlSelect} value={urls[this.state.selectedIndex].url} style={{ borderColor: selectorBorder }}>\n                                            {this._renderOptions(urls)}\n                                        </select>\n                                    </label>\n                                </form>\n                            )\n                        }\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nTopbar.propTypes = {\n    specSelectors: PropTypes.object.isRequired,\n    specActions: PropTypes.object.isRequired,\n    getComponent: PropTypes.func.isRequired,\n    getConfigs: PropTypes.func.isRequired\n}",
    "import Topbar from '../components/TopBar'\n\nconst CustomizePlugin = () => {\n    return {\n        wrapComponents: {\n            Topbar: () => Topbar, // Override original Topbar plugin\n            InfoUrl: () => () => null, // Disable info URL\n            authorizeBtn: () => () => null, // Disable authorize button\n            // InfoBasePath: () => () => null, //Disable base path link\n        },\n        statePlugins: {\n            spec: {\n                wrapSelectors: { allowTryItOutFor: () => () => false } // Disable try it out\n            }\n        }\n    }\n}\n\nexport default CustomizePlugin",
    "import './index.css'\nimport 'swagger-ui/dist/swagger-ui.css'\n\nimport $ from 'jquery'\nimport SwaggerUIBundle from 'swagger-ui'\nimport SwaggerUIStandalonePreset from 'swagger-ui/dist/swagger-ui-standalone-preset'\nimport CustomizePlugin from './plugins/CustomizePlugin'\n\n$.getJSON('./config.json', config => {\n\n    var _url = config.url ? config.url : undefined;\n    var _urls = config.urls ? config.urls : undefined;\n    var _primary = config.primary ? config.primary : undefined;\n\n    // Transform url to urls if necessary\n    _urls = (!_urls && _url) ? [{ \"url\": _url, \"name\": \"\" }] : _urls;\n\n    // Update header\n    $(document).attr(\"title\", config.title);\n\n    SwaggerUIBundle({\n        dom_id: \"#swagger-ui\",\n        urls: _urls,\n        \"urls.primaryName\": _primary,\n        deepLinking: true,\n        filter: false,\n        validatorUrl: null,\n        presets: [\n            SwaggerUIBundle.presets.apis,\n            SwaggerUIStandalonePreset\n        ],\n        plugins: [\n            SwaggerUIBundle.plugins.DownloadUrl,\n            CustomizePlugin\n        ],\n        layout: \"StandaloneLayout\",\n\n        custom: {\n            title: config.title,\n            subtitle: config.subtitle,\n            color: config.color,\n            background: config.background,\n            selectorBorderColor: config.selectorBorderColor\n        }\n    });\n});"
  ],
  "sourceRoot": ""
}