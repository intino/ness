dsl Ness

// STRUCTS

Struct Dst
	Attribute from as Long
	Attribute to as Long

Struct GeoPoint
	Attribute latitude as Double
	Attribute longitude as Double

	Method distanceTo as Function
		ReturnType as Integer
		Parameter point as Struct(GeoPoint)
		expression = "
		var R = 6378.137; // Radius of the earth in km
        var dLat = Math.toRadians(point.latitude - latitude);
        var dLon = Math.toRadians(point.longitude - longitude);
        var a = Math.sin(dLat/2) * Math.sin(dLat/2) + Math.cos(Math.toRadians(latitude)) * Math.cos(Math.toRadians(point.latitude)) * Math.sin(dLon/2) * Math.sin(dLon/2);
        return (int) (R * 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a)) * 1000);
		"

// DATASETS

Entity Employee
	Attribute name as String
	Attribute base as String
	Attribute foreman as Entity(Employee)
	Attribute phone as String
	Attribute photo as String
	Attribute role as String
	Attribute area as Entity(Area)
	Attribute email as String
	Attribute language as String


Entity Place as Abstract


Entity Country as ExtensionOf(Place)
	Attribute name as String
	Attribute language as String
	Attribute dst as Struct(Dst)

	Method hasDst as BooleanGetter("dst != null")

	Method isDst as Function("hasDst() && isDstEpochDay(date.toEpochDay())")
		ReturnType as Boolean
		Parameter date as Date

	Method isDstEpochDay as Function Private
		ReturnType as Boolean
		Parameter day as Long
		expression = "dst.from() <= day && day <= dst.to()"


Entity Region as ExtensionOf(Place)
	Attribute name as String
	Attribute country as Entity(Country)
	Attribute timeOffset as Double
	Attribute hasDst as Boolean

	Method timeOffsetHours as IntegerGetter("(int) timeOffset;")
	Method timeOffsetMinutes as IntegerGetter("Math.abs(timeOffset) - Math.abs((int)timeOffset) == 0.5 ? (timeOffset >= 0 ? 30 : -30) : 0")

	Method localDateTimeAt as Function
		ReturnType as DateTime
		Parameter ts as Instant
		expression = "
		LocalDateTime dateTime = LocalDateTime.ofInstant(ts, java.time.ZoneOffset.ofHoursMinutes(timeOffsetHours(), timeOffsetMinutes()));
        return dateTime.plusHours(dstOn(dateTime.toLocalDate()));
		"
	Method dstOn as Function("return hasDst && country().isDst(date) ? 1 : 0;") Private
		ReturnType as Integer
		Parameter date as Date


Entity Area as ExtensionOf(Place)
	Attribute type as Word("inner" "outer")
	Method name as StringGetter("return id().value();")


Entity Theater as ExtensionOf(Place)
	Attribute name as String
	Attribute address as String
	Attribute coordinates as Struct(GeoPoint)
	Attribute email as String List
	Attribute exhibitor as String
	Attribute idVista as String
	Attribute manager as String
	Attribute postalCode as String
	Attribute region as Entity(Region)
	Attribute screens as Entity(Screen) List
	Attribute ipOrder as String
	Attribute ipSegment as String
	Attribute ipTms as String
	Attribute shared as String
	Attribute telephone as String
	Attribute territory as String
	Attribute type as String
	Attribute area as Entity(Area)
	Attribute employee as Entity(Employee) // TODO

	Method isValid as BooleanGetter("return enabled() && ipSegment != null;") // = isEnabled

Entity Screen as ExtensionOf(Place)
	Attribute theater as Entity(Theater)
	Attribute seats as Integer
	Attribute ipOffset as Integer
	Attribute optimized as Boolean(defaultValue = false)
	Attribute type as Word("STANDARD" "LED" "LASER" "MACRO_XE" "IMAX" "VR", defaultValue = "STANDARD")
	Attribute tech3D as Word("IMAX" "IMAXbarco" "IMAXchristie" "REALD")
	Attribute tech4D as Word("_4DX")
	Attribute setup as Word("STANDARD" "JUNIOR" "PREMIUM", defaultValue = "STANDARD")
	Attribute screenDocks as Entity(ScreenDock) List
	Attribute twin as String

	Method code as StringGetter("id().value()")
	Method index as IntegerGetter("Integer.parseInt(indexStr())")
	Method indexStr as StringGetter("id().get().substring(id().get().indexOf('.') + 1, id().get().indexOf(':'))")
	Method is3D as BooleanGetter("tech3D != null")
	Method is4D as BooleanGetter("tech4D != null")

	Method projector as Function
		ReturnType as Entity(ScreenDock)
		expression = "screenDocks().stream().filter(s -> s.category == ScreenDock.Category.Projector).findFirst().orElse(null);"

	Method player as Function
		ReturnType as Entity(ScreenDock)
		expression = "screenDocks().stream().filter(s -> s.category == ScreenDock.Category.Player).findFirst().orElse(null);"

	Method lamp as Function
		ReturnType as Entity(ScreenDock)
		expression = "screenDocks().stream().filter(s -> s.category == ScreenDock.Category.Lamp).findFirst().orElse(null);"


Entity Dock as Abstract
	Attribute ip as String
	Attribute asset as Entity(Asset)
	Method code as StringGetter("String.valueOf(Math.abs(ip.hashCode()))")


Entity ScreenDock as ExtensionOf(Dock)
	Attribute screen as Entity(Screen)
	Attribute category as Word("Projector" "Player" "Lamp")
	Attribute type as Word("STANDARD" "NONE" "IMAX" "CP2000" "UNTRACEABLE" "LASER" "LED", defaultValue = "STANDARD")

Entity Asset


// DEFINITIONS


