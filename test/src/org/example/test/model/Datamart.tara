dsl Ness

use Datalake

Datamart(scale = Day) master

	Entity Area > from = dl.areaAssertion
	Entity Host > from = dl.hostAssertion

	Entity User > from = dl.userAssertion

	Entity Team > from = dl.teamAssertion
		Attribute users as Entity(User) List
		Attribute channels as Entity(Channel) List
		Attribute someWord as Word("A" "B" "C")
        Attribute theDateTime as DateTime(format="dd/MM/yyyy HH:mm:ss")

		// public String firstUserName();
		Method firstUserName as StringGetter("users().isEmpty() ? null : users().get(0).id()")

		// public void println(String message);
		Method println as Routine("System.out.println(message)") > Parameter message as String

		// public LocalDate dateOf(User user);
		Method dateOf as Function
			ReturnType as Date
			Parameter user as Entity(User)
			expression = "
			if(user == null) return LocalDate.now();
			if(user.toString().isEmpty()) {
				return LocalDate.now().minusDays(10);
			}
			return LocalDate.parse(user.toString());
			"


	Struct Coords
		Attribute x as Integer
		Attribute y as Integer
		Attribute theDate as Date
		Attribute theDateTime as DateTime
		Attribute theInstant as Instant

		Method getSum as IntegerGetter("x() + y()")


	Entity Channel > from = dl.channelAssertion
		Attribute coordinate as Struct(Coords)
		Attribute listOfStructs as Struct(Coords) List
		Attribute setOfStructs as Struct(Coords) Set
		Attribute map as Map

		Method doSomething as Routine > expression = "System.out.println(\"Hola!\" + listOfStructs())"

		Method func as Function
			ReturnType as DateTime
        	Parameter x as Integer
        	Parameter y as String
        	Parameter z as Struct(Coords) List
        	expression = "
			if(x <= 0) return LocalDateTime.now();
			if(x > 0) return LocalDateTime.parse(y);
			return null;
        	"

	Entity System as Abstract
		Attribute container as Entity(System)
		Attribute team as Entity(Team)
		Attribute area as Entity(Area)
		Attribute host as Entity(Host)

	Entity Asset as ExtensionOf(System) > from = dl.assetAssertion
		Attribute area as Entity(Area)
		Attribute host as Entity(Host)

	Entity AnomalyType > from = dl.anomalyTypeAssertion

	Entity AnomalyRule > from = dl.anomalyRuleAssertion

	Entity Service as Abstract ExtensionOf(System)
	Entity RdbmsService as ExtensionOf(Service) > from = dl.rdbmsServiceAssertion
	Entity ApplicationService as ExtensionOf(Service) > from = dl.applicationServiceAssertion
