def type(indicatorNode & default) trigger(nodeImpl)
	private class IndicatorNodeImpl implements IndicatorNode {
		private final String id;
		private volatile File file;

		private IndicatorNodeImpl(String id, File file) {
			this.id = requireNonNull(id);
			this.file = file;
		}

		@Override
		public boolean exists() {
			try {
				return get() != null;
			} catch(IndicatorNotAvailableException e) {
				return false;
			}
		}

		@Override
		public Indicator get() throws IndicatorNotAvailableException {
			synchronized(this) {
				try {
					if (hasLocalAccessToIndicators) return Indicator.load(new java.io.FileInputStream(this.file));
					return downloadFromDatahub();
				} catch(Exception e) {
					throw new IndicatorNotAvailableException(e);
				}
			}
		}


		private Indicator downloadFromDatahub() throws Exception {
			jakarta.jms.Message response = requestResponseFromDatahub("get-indicator=" + id(), request(hasLocalAccessToIndicators ? "path" : "download"));
        	if (!response.getBooleanProperty("success")) throw new ReelNotAvailableException("Could not get indicator " + id + " because datahub returned success=false in the response");
        	if (response instanceof jakarta.jms.TextMessage textResponse) {
        		file = getFile(textResponse);
        		hasLocalAccessToIndicators = true;
        		if (file != null && file.exists()) return loadFile();
        		file = null;
        		hasLocalAccessToIndicators = false;
        		response = requestResponseFromDatahub("get-indicator=" + id(), request("download"));
        	}
        	if (!response.getBooleanProperty("success")) throw new ReelNotAvailableException("Could not get indicator " + id + " because datahub returned success=false in the response");
        	return readFromBytes((jakarta.jms.BytesMessage) response);
		}

		private Indicator readFromBytes(jakarta.jms.BytesMessage m) throws Exception {
			int messageSize = m.getIntProperty("size");
			byte$[$] bytes = new byte$[messageSize$];
			m.readBytes(bytes, messageSize);
			return Indicator.load(new ByteArrayInputStream(bytes));
		}

		private jakarta.jms.Message request(String mode) throws Exception {
			ActiveMQTextMessage message = new ActiveMQTextMessage();
			message.setText("datamart=" + name() + ";operation=get-indicator;id=" + id + ";mode=" + mode);
			return message;
		}
	}
end