def type(datamart & message & impl)
	package $package;

	import io.intino.alexandria.Timetag;
	import io.intino.alexandria.event.Event;
	import io.intino.alexandria.logger.Logger;
	import io.intino.alexandria.terminal.Connector;
	import io.intino.ness.master.reflection.*;
	import io.intino.ness.master.model.Entity;

	import org.apache.activemq.command.ActiveMQTextMessage;

	import java.io.File;
	import java.util.*;
	import java.io.*;
	import java.util.concurrent.atomic.AtomicBoolean;
	import java.util.stream.Stream;
	import java.util.stream.Collectors;
	import java.time.LocalDate;
	import java.time.LocalDateTime;
	import java.time.Instant;

	import $ontologypackage.*;

	import static java.util.Objects.requireNonNull;

	public class $name+FirstUpperCase~DatamartImpl implements $name+FirstUpperCase~Datamart {

		private static final String DATAHUB_MESSAGE_TOPIC = "service.ness.datamarts";
		private static final $name+FirstUpperCase~DatamartImpl.$name+FirstUpperCase~DatamartDefinition definition = new $name+FirstUpperCase~DatamartImpl.$name+FirstUpperCase~DatamartDefinition();

		[private static final Set<String> TIMELINE_EVENTS = Set.of($timelineEvents);]
		[private static final Set<String> REEL_EVENTS = Set.of($reelEvents);]

		private final Connector connector;
		private final $terminal~.DatamartsRetryConfig retryConfig;
		private final List<EntityListener> entityListeners = new ArrayList<>();
		private final Map<String, List<MasterMounter>> mounters = new HashMap<>();
		private final $name+FirstUpperCase~Datamart.Entities entities;
		private Instant ts;
		[$hasTimelines~private boolean hasLocalAccessToTimelines;]
		[$hasTimelines~private final Map<String, TimelineNodeImpl> timelines = new java.util.concurrent.ConcurrentHashMap<>();]
		[$hasTimelines~private boolean hasLocalAccessToIndicators;]
		[$hasTimelines~private final Map<String, IndicatorNodeImpl> indicators = new java.util.concurrent.ConcurrentHashMap<>();]
		[$hasReels~private boolean hasLocalAccessToReels;]
		[$hasReels~private final Map<String, ReelNodeImpl> reels = new java.util.concurrent.ConcurrentHashMap<>();]
		private volatile Translator translator = new Translator.Indentity();
		private volatile boolean initializing = false;

    	public $name+FirstUpperCase~DatamartImpl(Connector connector, $terminal~.DatamartsRetryConfig retryConfig) {
    		this.connector = requireNonNull(connector);
    		this.retryConfig = requireNonNull(retryConfig);
    		this.entities = new $name+FirstUpperCase~Datamart.Entities(this);
    		initMounters();
    	}

		public synchronized $name+FirstUpperCase~DatamartImpl init(String datamartSourceSelector) {
			try {
				initializing = true;
				downloadDatamartFromDatahub(datamartSourceSelector);
				Logger.info("$name+FirstUpperCase~Datamart (" + (snapshotTimetag().isEmpty() ? "" : "snapshot " + snapshotTimetag() + ", ")  + connector.clientId() + ") initialized successfully.");
			} catch (Exception e) {
				throw new ExceptionInInitializerError("$name+FirstUpperCase~Datamart failed to start because a " + e.getClass().getName() + " occurred: " + e.getMessage());
			} finally {
				initializing = false;
			}
			return this;
		}

		public boolean requiresDatahubNotifications() {
			return true;
		}

		@Override
		public int size() {
			return entities.size();
		}

		@Override
		public int sizeDisabled() {
			return entities.sizeDisabled();
		}

		@Override
		@SuppressWarnings("unchecked")
		public <T extends Entity> T get(String id) {
			return (T) entities.get(id);
		}

		@Override
		public Stream<Entity> entities() {
			return entities.streamGeneric();
		}

		@Override
		public void addEntityListener(EntityListener listener) {
			if (listener == null) throw new NullPointerException("EntityListener cannot be null");
			entityListeners.add(listener);
		}

		@Override
		public DatamartDefinition getDefinition() {
			return definition;
		}

		@Override
        public List<String> listSnapshots() {
        	try {
        		jakarta.jms.Message message = requestResponseFromDatahub("listSnapshots", listSnapshotsRequest());
        		if (!message.getBooleanProperty("success")) throw new Exception(((jakarta.jms.TextMessage) message).getText());
        		return handleListSnapshotsResponse(message);
        	} catch (Exception e) {
        		Logger.error("Could not download list of available snapshots: " + e.getMessage(), e);
        		return java.util.Collections.emptyList();
        	}
        }

        private jakarta.jms.Message listSnapshotsRequest() throws Exception {
        	ActiveMQTextMessage message = new ActiveMQTextMessage();
        	message.setText("datamart=" + name() + ";operation=snapshots");
        	return message;
        }

        private List<String> handleListSnapshotsResponse(jakarta.jms.Message message) throws Exception {
        	return java.util.Arrays.stream(((jakarta.jms.TextMessage) message).getText().split(",")).collect(Collectors.toList());
        }

        @Override
        public synchronized $name+FirstUpperCase~Datamart snapshot(String timetag) {
        	if (timetag == null) return this;
        	return new $name+FirstUpperCase~DatamartImpl(connector, retryConfig) {
        		@Override
        		protected String snapshotTimetag() {
        			return timetag;
        		}
        		@Override
        		public synchronized MasterDatamart snapshot(String timetag) {
        			throw new java.lang.UnsupportedOperationException("Cannot request snapshots to snapshot instances of a datamart");
        		}
        	}.init(null);

        public Instant ts() {
        	return this.ts;
        }

    	[$entity+getter...[$NL$NL]]

		[$hasTimelines+timelinesByIdMethod]
    	[$timeline+getter...[$NL$NL]]

		[$hasReels+reelsByIdMethod]
    	[$reel+getter...[$NL$NL]]
		[$indicator+getter...[$NL$NL]]

    	@Override
    	public Translator translator() {
    		return translator;
    	}

		@Override
		public void translator(Translator translator) {
			this.translator = Translator;
		}

		private void downloadDatamartFromDatahub(String datamartSourceSelector) throws DatahubRequestException {
			if (connector instanceof io.intino.alexandria.terminal.StubConnector) return;
			Logger.debug("Downloading datamart from datahub...");
    		long start = java.lang.System.currentTimeMillis();

    		Logger.debug("Downloading entities...");
    		int$[$] eventCount = new int$[1$];
    		loadEntitiesFromEvents(downloadEntities(eventCount, datamartSourceSelector), eventCount);

    		[$hasTimelines~loadTimelinesFromDatahub();]
    		[$hasTimelines~loadIndicatorsFromDatahub();]

    		[$hasReels~loadReelsFromDatahub();]

			long time = java.lang.System.currentTimeMillis() - start;
			Logger.debug("Datamart downloaded from datahub after " + time + " ms");
		}

		[$hasTimelines+loadTimelinesFromDatahubMethod]
		[$hasTimelines+loadIndicatorsFromDatahubMethod]

		[$hasReels+loadReelsFromDatahubMethod]

		private Stream<Event> downloadEntities(int$[$] eventCount, String datamartSourceSelector) throws DatahubRequestException {
			try {
				jakarta.jms.Message message = requestResponseFromDatahub("downloadEvents", downloadEntitiesRequest(datamartSourceSelector));
				if (!message.getBooleanProperty("success")) throw new Exception(((jakarta.jms.TextMessage) message).getText());
				return handleDownloadResponse(message, eventCount);
			} catch (NullPointerException e) {
				throw new DatahubRequestException("Could not download datamart: no response from datahub.");
			} catch(DatahubRequestException e) {
				throw e;
			} catch (Exception e) {
				throw new DatahubRequestException("Could not download datamart: " + e.getMessage());
			}
		}

		private jakarta.jms.Message downloadEntitiesRequest(String datamartSourceSelector) throws Exception {
			ActiveMQTextMessage message = new ActiveMQTextMessage();
			message.setText("datamart=" + name() +
				";operation=entities" +
				(snapshotTimetag().isEmpty() ? "" : ";timetag=" + snapshotTimetag()) +
				(datamartSourceSelector == null ? "" : ";sourceSelector=" + datamartSourceSelector)
			);
			return message;
		}

		protected String snapshotTimetag() {
			return "";
		}

		private Stream<Event> handleDownloadResponse(jakarta.jms.Message message, int$[$] eventCount) throws Exception {
			jakarta.jms.BytesMessage m = (jakarta.jms.BytesMessage) message;
			eventCount$[0$] = m.getIntProperty("size");
			int size = m.getIntProperty("size");
			byte$[$] bytes = new byte$[size$];
			m.readBytes(bytes, size);
			return io.intino.alexandria.zim.ZimStream.of(new java.io.ByteArrayInputStream(bytes)).map(io.intino.alexandria.event.message.MessageEvent::new);
		}

		private void loadEntitiesFromEvents(Stream<Event> events, int$[$] eventCount) {
			events.forEach(this::mount);
		}

		public synchronized void mount(Event event) {
			try {
				if (event == null) return;
            	this.ts = event.ts();
            	mountEntities(event);
			} catch(Throwable e) {
				Logger.error("Error while mounting event ss=" + event.ss() + ", ts=" + event.ts() + " -> " + e.getMessage(), e);
			}
		}

		public synchronized void handleDatahubNotification(String notification) {
			try {
				if(notification == null || notification.isBlank()) return;
				String$[$] typeAndSs = notification.split("\\0");
        		[$hasTimelines~handleTimelineNotification(typeAndSs$[0$], typeAndSs$[1$]);]
        		[$hasReels~handleReelNotification(typeAndSs$[0$], typeAndSs$[1$]);]
			} catch(Throwable e) {
				Logger.error("Error while processing datahub notification " + notification + ": " + e.getMessage(), e);
			}
		}

		[$hasReels~private void handleReelNotification(String type, String id) {
			if (!REEL_EVENTS.contains(type)) return;
			String key = id + ":" + type;
			ReelNodeImpl reel = reels.computeIfAbsent(id + ":" + type, k -> new ReelNodeImpl(id, type, null));
			reel.notifyChange();
		}]

		[$hasTimelines~private void handleTimelineNotification(String type, String id) {
			if (!TIMELINE_EVENTS.contains(type)) return;
			TimelineNodeImpl timeline = timelines.computeIfAbsent(id + ":" + type, k -> new TimelineNodeImpl(id, type, null));
			timeline.notifyChange();
		}]

		private void mountEntities(Event event) {
			try {
				List<$name+FirstUpperCase~Mounter> mounters = this.mounters.get(event.type());
				if(mounters == null) return;
				mounters.forEach(mounter -> mounter.useListeners(!initializing).mount(event));
			} catch (Exception e) {
				Logger.error("Failed to mount event of type " + event.type() + ": " + e.getMessage(), e);
			}
		}

		private void initMounters() {
			[$entity+registerMounter...[$NL]]
		}

		private static int availableThreads() {
			return Runtime.getRuntime().availableProcessors();
		}

		private jakarta.jms.Message requestResponseFromDatahub(String requestName, jakarta.jms.Message request) throws DatahubRequestException {
        	long timeout = retryConfig.initialTimeoutAmount;
        	for(int i = 0; i < retryConfig.maxAttempts; i++) {
        		jakarta.jms.Message message = connector.requestResponse(DATAHUB_MESSAGE_TOPIC, request, timeout, retryConfig.timeoutUnit);
        		if (message != null) return message;
        		if (i < retryConfig.maxAttempts - 1) Logger.warn("("+(i+1)+") Datahub did not respond after " + timeout + " " + retryConfig.timeoutUnit + " to the request '" + requestName + "'. Trying again...");
        		timeout *= retryConfig.timeoutMultiplier;
        	}
        	throw new DatahubRequestException("Datahub did not respond to the request '" + requestName + "' after " + retryConfig.maxAttempts);
        }

		[$timelineNode+nodeImpl]

		[$reelNode+nodeImpl]

		[$indicatorNode+nodeImpl]

		private static Set<String> sourcesOfTimeline(String type) {
        	return switch(type) {
        		[$timeline+sourcesSwitchCase...[$NL]]
        		default -> java.util.Collections.emptySet();
        	};
        }

		private static Set<String> sourcesOfReel(String type) {
        	return switch(type) {
        		[$reel+sourcesSwitchCase...[$NL]]
        		default -> java.util.Collections.emptySet();
        	};
        }

		public static final class $name+FirstUpperCase~DatamartDefinition implements DatamartDefinition {

			@Override
			public String name() {
				return "$name";
			}

			@Override
			public Scale scale() {
				return Scale.$scale;
			}

			@Override
			public Query<EntityDefinition> entities() {
				return new Query<EntityDefinition>(List.of([$entity+definition...[,]]));
			}

			@Override
			public Query<StructDefinition> structs() {
				return new Query<StructDefinition>(List.of([$struct+definition...[,]]));
			}

			@Override
			public Optional<EntityDefinition> entity(String name) {
				switch(name) {
					[$entity+defSwitchCase...[$NL]]
				}
				return Optional.empty();
			}

			@Override
        	public Optional<StructDefinition> struct(String name) {
        		switch(name) {
        			[$struct+defSwitchCase...[$NL]]
        		}
        		return Optional.empty();
        	}

			private $name+FirstUpperCase~DatamartDefinition datamart() {
				return this;
			}

			[$entity+declareDefinition...[$NL]]

            [$struct+declareDefinition...[$NL]]
		}

		static {
			try {
				Object ref = $name+firstUpperCase~Datamart.class.getDeclaredField("definition").get(null);
				java.lang.reflect.Field field = ref.getClass().getDeclaredField("definition");
				field.setAccessible(true);
				field.set(ref, definition);
				field.setAccessible(false);
			} catch (Exception e) {
				throw new ExceptionInInitializerError("Could not set $name+firstUpperCase~Datamart.definition field");
			}
		}
    }
end

def type(entity) trigger(definition)
	$name+firstLowerCase~EntityDefinition
end

def type(struct) trigger(definition)
	$fullName+firstLowerCase~StructDefinition
end

def type(entity) trigger(defSwitchCase)
	case "$name+FirstUpperCase": return Optional.of($name+firstLowerCase~EntityDefinition);
end

def type(struct) trigger(defSwitchCase)
	case "$fullName+FirstUpperCase": return Optional.of($fullName+firstLowerCase~StructDefinition);
end

def type(entity) trigger(declareDefinition)
	public final EntityDefinition $name+firstLowerCase~EntityDefinition = new EntityDefinition() {
		private final List<AttributeDefinition> declaredAttributes = initAttributeDefinitions();
		public String fullName() {return "$fullName";}
		public String name() {return "$name";}
		public boolean isAbstract() {return $isAbstract;}
		public List<AttributeDefinition> declaredAttributes() {	return declaredAttributes;}
		public Optional<EntityDefinition> parent() {return [Optional.of($parent+firstLowerCase~EntityDefinition)?Optional.empty()];}
		public List<EntityDefinition> ancestors() {return java.util.List.of([$ancestor+definition...[,]]);}
		public List<EntityDefinition> descendants() {return java.util.List.of([$descendant+definition...[,]]);}
		public Class<?> javaClass() {return $package.entities.$name+FirstUpperCase.class;}
		private List<AttributeDefinition> initAttributeDefinitions() {
			List<AttributeDefinition> list = new ArrayList<>();
			[$hasNoParents+addIdAndEnabledAttributes]
        	[$attribute+addDefinition...[$NL]]
        	return Collections.synchronizedList(list);
		}
		public boolean equals(Object other) {
			if (other == null || other.getClass() != getClass()) return false;
			return fullName().equals(((EntityDefinition)other).fullName());
		}
		public int hashCode() {return fullName().hashCode();}
		public String toString() {return fullName();}
	};
end

def type(struct) trigger(declareDefinition)
	public final StructDefinition $fullName+firstLowerCase~StructDefinition = new StructDefinition() {
		private final List<AttributeDefinition> declaredAttributes = initAttributeDefinitions();
		public String fullName() {return "$fullName";}
		public String name() {return "$name";}
		public List<AttributeDefinition> declaredAttributes() {return declaredAttributes;}
		public Optional<StructDefinition> parent() {return [Optional.of($parent+firstLowerCase~StructDefinition)?Optional.empty()];}
		public List<StructDefinition> ancestors() {return java.util.List.of([$ancestor+definition...[,]]);}
		public List<StructDefinition> descendants() {return java.util.List.of([$descendant+definition...[,]]);}
		public Class<?> javaClass() {return $package.$name+FirstUpperCase.class;}
		private List<AttributeDefinition> initAttributeDefinitions() {
			List<AttributeDefinition> list = new ArrayList<>($numAttributes);
        	[$attribute+addDefinition...[$NL]]
        	return Collections.synchronizedList(list);
		}
		public boolean equals(Object other) {
        	if (other == null || other.getClass() != getClass()) return false;
        	return fullName().equals(((StructDefinition)other).fullName());
        }
        public int hashCode() {return fullName().hashCode();}
        public String toString() {return fullName();}
	};
end

def type(subclass) trigger(name)
	"$name+FirstUpperCase"
end

def type(entity) type(descendant | ancestor) trigger(definition)
	$name+FirstUpperCase~EntityDefinition
end

def type(struct) type(descendant | ancestor) trigger(definition)
	$name+FirstUpperCase~StructDefinition
end

def trigger(addIdAndEnabledAttributes)
	list.add(new AttributeDefinition() {
		public String name() {return "id";}
		public Class<?> type() {return String.class;}
		public String toString() {return name();}
	});
	list.add(new AttributeDefinition() {
		public String name() {return "enabled";}
		public Class<?> type() {return Boolean.class;}
		public String toString() {return name();}
	});
end

def type(attribute) !type(inherited) type(collection) trigger(addDefinition)
	list.add(new AttributeDefinition() {
		public String name() {return "$name+firstLowerCase";}
		public Class<?> type() {return $type~.class;}
		public String toString() {return name();}
		public List<ParameterDefinition> parameters() {
			return List.of(new ParameterDefinition() {
				public Optional<ConceptDefinition<?>> asConceptDefinition() {return $parameter+asConceptDefinition;}
				public Class<?> javaClass() {return $parameterType~.class;}
				public String toString() {return javaClass().getSimpleName();}
			});
		}
	});
end

def type(attribute) !type(inherited) trigger(addDefinition)
	list.add(new AttributeDefinition() {
		public String name() {return "$name+firstLowerCase";}
		public Class<?> type() {return $type~.class;}
		public String toString() {return name();}
	});
end

def type(parameter) type(entity) trigger(asConceptDefinition)
	Optional.of(datamart().$name+firstLowerCase~EntityDefinition)
end

def type(parameter) type(struct) trigger(asConceptDefinition)
	Optional.of(datamart().$name+firstLowerCase~StructDefinition)
end

def type(parameter) trigger(asConceptDefinition)
	Optional.empty()
end

def !type(abstract) type(entity) trigger(registerMounter)
	mounters.computeIfAbsent("$event+firstUpperCase", type -> new ArrayList<>(1)).add(new $package.mounters.$name+FirstUpperCase~Mounter(entities, entityListeners));
end

def type(subclasstop) trigger(getAllStream)
	$name+Plural+firstLowerCase()
end

def type(subclasstop) trigger(getAllStreamDisabled)
	$name+Plural+firstLowerCase~Disabled()
end

def type(timeline) trigger(getter)
	@Override
	public TimelineNode $name+FirstLowerCase~Timeline(String id) {
		String key = id.replace(":", "-") + ":$name";
		if (timelines.containsKey(key)) return timelines.get(key);
		if (!hasLocalAccessToTimelines) return timelines.computeIfAbsent(key, theId -> new TimelineNodeImpl(id, "$name"));
		return TimelineNode.empty();
	}
end

def type(reel) trigger(getter)
	@Override
	public ReelNode $name+FirstLowerCase~Reel(String id) {
		String key = id.replace(":", "-") + ":$name";
		if (reels.containsKey(key)) return reels.get(key);
		if (!hasLocalAccessToReels) return reels.computeIfAbsent(key, theId -> new ReelNodeImpl(id, "$name"));
		return ReelNode.empty();
	}

	@Override
	public Stream<ReelNode> $name+FirstLowerCase~Reels() {
		Stream stream = reels.values().stream().filter(r -> r.type.equals("$name")).toList().stream();
		return stream;
	}
end

def type(indicator) trigger(getter)
	@Override
	public IndicatorNode $label+FirstLowerCase~Indicator() {
		if (hasLocalAccessToIndicators) return indicators.containsKey("$name") ? indicators.get("$name") : IndicatorNode.empty();
		return indicators.computeIfAbsent("$name", theId -> new IndicatorNodeImpl("$name", null));
	}
end

def trigger(timelinesByIdMethod)
	@Override
	public Stream<TimelineNode> timelines(String id) {
		Stream stream = timelines.values().stream().filter(t -> t.id.equals(id)).toList().stream();
		return stream;
	}
end

def trigger(reelsByIdMethod)
	@Override
	public Stream<ReelNode> reels(String id) {
		Stream stream = reels.values().stream().filter(r -> r.id.equals(id)).toList().stream();
		return stream;
	}
end

def trigger(sourcesSwitchCase)
	case "$name" -> Set.of($sources);
end

def type(abstract) trigger(getter)
	@Override
	public $package.entities.$name+FirstUpperCase $name+firstLowerCase(String id) {
		return id == null ? null : entities.getDescendant(definition.$name+firstLowerCase~EntityDefinition, id);
	}

	@Override
	public $package.entities.$name+FirstUpperCase $name+firstLowerCase~Disabled(String id) {
		return id == null ? null : entities.getDescendantDisabled(definition.$name+firstLowerCase~EntityDefinition, id);
	}

	@Override
	public Stream<$package.entities.$name+FirstUpperCase> $name+Plural+firstLowerCase() {
		return Stream.of(
			$subclasstop+getAllStream...[,$NL]
		).<$package.entities.$name+FirstUpperCase>flatMap(java.util.function.Function.identity());
	}

	@Override
	public Stream<$package.entities.$name+FirstUpperCase> $name+Plural+firstLowerCase~Disabled() {
		return Stream.of(
			$subclasstop+getAllStreamDisabled...[,$NL]
		).<$package.entities.$name+FirstUpperCase>flatMap(java.util.function.Function.identity());
	}
end

def type(superclass) !type(abstract) trigger(getter)
	@Override
	public $package.entities.$name+FirstUpperCase $name+firstLowerCase(String id) {
		return id == null ? null : entities.getDescendant(definition.$name+firstLowerCase~EntityDefinition, id);
	}

	@Override
	public $package.entities.$name+FirstUpperCase $name+firstLowerCase~Disabled(String id) {
		return id == null ? null : entities.getDescendantDisabled(definition.$name+firstLowerCase~EntityDefinition, id);
	}

	@Override
	public Stream<$package.entities.$name+FirstUpperCase> $name+Plural+firstLowerCase() {
		return Stream.of(
			entities.<$package.entities.$name+FirstUpperCase>stream(definition.$name+firstLowerCase~EntityDefinition),
			$subclasstop+getAllStream...[,$NL]
		).<$package.entities.$name+FirstUpperCase>flatMap(java.util.function.Function.identity());//.distinct();
	}

	@Override
	public Stream<$package.entities.$name+FirstUpperCase> $name+Plural+firstLowerCase~Disabled() {
		return Stream.of(
			entities.<$package.entities.$name+FirstUpperCase>streamDisabled(definition.$name+firstLowerCase~EntityDefinition),
			$subclasstop+getAllStreamDisabled...[,$NL]
		).<$package.entities.$name+FirstUpperCase>flatMap(java.util.function.Function.identity());
	}
end

def trigger(getter)
	@Override
	public $package.entities.$name+FirstUpperCase $name+firstLowerCase(String id) {
		return id == null ? null : entities.get(definition.$name+firstLowerCase~EntityDefinition, id);
	}

	@Override
	public $package.entities.$name+FirstUpperCase $name+firstLowerCase~Disabled(String id) {
		return id == null ? null : entities.getDisabled(definition.$name+firstLowerCase~EntityDefinition, id);
	}

	@Override
	public Stream<$package.entities.$name+FirstUpperCase> $name+Plural+firstLowerCase() {
		return entities.stream(definition.$name+firstLowerCase~EntityDefinition);
	}

	@Override
	public Stream<$package.entities.$name+FirstUpperCase> $name+Plural+firstLowerCase~Disabled() {
		return entities.streamDisabled(definition.$name+firstLowerCase~EntityDefinition);
	}
end

def trigger(loadTimelinesFromDatahubMethod)
	private void loadTimelinesFromDatahub() {
		Logger.debug("Downloading timelines...");
		Boolean hasLocalAccessToTimelines = null;
        for(String filename : listTimelineFiles()) {
        	if (filename == null || filename.isBlank()) continue;
        	try {
               	File file = new File(filename);
               	String id = file.getName().replace(".timeline", "");
               	String type = file.getParentFile().getName();
               	TimelineNodeImpl node = new TimelineNodeImpl(id, type, file.exists() ? file : null);
               	timelines.put(id + ":" + type, node);
               	if (hasLocalAccessToTimelines == null) hasLocalAccessToTimelines = file.exists();
               	else hasLocalAccessToTimelines &= file.exists();
            } catch (Exception e) {
               	Logger.debug("Could not load timeline " + filename + " -> " + e.getClass().getSimpleName() + ": " + e.getMessage());
            }
        }
        this.hasLocalAccessToTimelines = hasLocalAccessToTimelines != null && hasLocalAccessToTimelines;
        Logger.debug("Loaded " + timelines.size() + " timelines (hasLocalAccessToTimelines=" + this.hasLocalAccessToTimelines + ")");
    }

    private String$[$] listTimelineFiles() {
    	try {
    		ActiveMQTextMessage request = new ActiveMQTextMessage();
    		request.setText("datamart=" + name() + ";operation=list-timelines;");
    		jakarta.jms.Message message = requestResponseFromDatahub("list-timelines", request);
    		if (!message.getBooleanProperty("success")) throw new Exception(((jakarta.jms.TextMessage) message).getText());
    		return ((jakarta.jms.TextMessage) message).getText().split(",");
    	} catch (Exception e) {
    		Logger.error(e);
    		return new String$[0$];
    	}
    }
end


def trigger(loadIndicatorsFromDatahubMethod)
	private void loadIndicatorsFromDatahub() {
		Logger.debug("Downloading indicators...");
		Boolean hasLocalAccessToIndicators = null;
        for(String filename : listIndicatorFiles()) {
			if (filename == null || filename.isBlank()) continue;
			try {
				File file = new File(filename);
				String id = file.getName().replace(".indicator", "");
				IndicatorNodeImpl node = new IndicatorNodeImpl(id, file.exists() ? file : null);
				indicators.put(id, node);
				if (hasLocalAccessToIndicators == null) hasLocalAccessToIndicators = file.exists();
				else hasLocalAccessToIndicators &= file.exists();
			} catch (Exception e) {
				Logger.debug("Could not load indicator " + filename + " -> " + e.getClass().getSimpleName() + ": " + e.getMessage());
			}
		}
		this.hasLocalAccessToIndicators = hasLocalAccessToIndicators != null && hasLocalAccessToIndicators;
		Logger.debug("Loaded " + indicators.size() + " indicators (hasLocalAccessToTimelines=" + this.hasLocalAccessToTimelines + ")");
    }

    private String$[$] listIndicatorFiles() {
    	try {
    		ActiveMQTextMessage request = new ActiveMQTextMessage();
    		request.setText("datamart=" + name() + ";operation=list-indicators;");
    		jakarta.jms.Message message = requestResponseFromDatahub("list-indicators", request);
    		if (!message.getBooleanProperty("success")) throw new Exception(((jakarta.jms.TextMessage) message).getText());
    		return ((jakarta.jms.TextMessage) message).getText().split(",");
    	} catch (Exception e) {
    		Logger.error(e);
    		return new String$[0$];
    	}
    }
end

def trigger(loadReelsFromDatahubMethod)
	private void loadReelsFromDatahub() {
		Logger.debug("Downloading reels...");
		Boolean hasLocalAccessToReels = null;
    	for(String filename : listReelFiles()) {
    		if (filename == null || filename.isBlank()) continue;
    		try {
    	    	File file = new File(filename);
    	    	String id = file.getName().replace(".reel", "");
    	    	String type = file.getParentFile().getName();
    	    	ReelNodeImpl node = new ReelNodeImpl(id, type, file.exists() ? file : null);
    	    	reels.put(id + ":" + type, node);
    	    	if (hasLocalAccessToReels == null) hasLocalAccessToReels = file.exists();
                else hasLocalAccessToReels &= file.exists();
    	    } catch (Exception e) {
    	    	Logger.debug("Could not load reel " + filename + " -> " + e.getClass().getSimpleName() + ": " + e.getMessage());
    	    }
    	}
    	this.hasLocalAccessToReels = hasLocalAccessToReels != null && hasLocalAccessToReels;
    	Logger.debug("Loaded " + reels.size() + " reels");
    }

    private String$[$] listReelFiles() {
    	try {
    		ActiveMQTextMessage request = new ActiveMQTextMessage();
    		request.setText("datamart=" + name() + ";operation=list-reels;");
    		jakarta.jms.Message message = requestResponseFromDatahub("list-reels", request);
    		if (!message.getBooleanProperty("success")) throw new Exception(((jakarta.jms.TextMessage) message).getText());
    		return ((jakarta.jms.TextMessage)message).getText().split(",");
    	} catch (Exception e) {
    		Logger.error(e);
    		return new String$[0$];
    	}
    }
end
