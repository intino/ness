def type(validationLayer & class)
	package $package;

    public class $module+FirstUpperCase~RecordValidationLayer extends io.intino.ness.master.data.validation.RecordValidationLayer {

    	public $module+FirstUpperCase~RecordValidationLayer() {
    		[$entity+putValidator...[$NL]]
    	}
    }
end

def type(validator & decorable)
	package $package;

	public class $name+FirstUpperCase~Validator extends Abstract$name+FirstUpperCase~Validator {

	}
end

def type(validator & class)
	package $package;

	import io.intino.ness.master.data.validation.Issue;
	import io.intino.ness.master.data.validation.RecordValidator;
	import io.intino.ness.master.data.validation.RecordValidator.TripletRecord;
	import io.intino.ness.master.data.validation.FieldValidator;
	import io.intino.ness.master.data.validation.TripletRecordStore;

	import java.util.List;
	import java.util.Map;
	import java.util.Objects;
	import java.util.stream.Stream;

	import static io.intino.ness.master.data.validation.Issue.Type.*;

	public [ $isAbstract+firstLowerCase] class $abstract+FirstUpperCase~$name+FirstUpperCase~Validator implements RecordValidator {

		protected final Map<String, FieldValidator> validatorsPerField = new java.util.HashMap<>(); {
			[$attribute+attribValidatorMap...[$NL]]
		}

		@Override
		public Stream<Issue> validate(TripletRecord record, TripletRecordStore store) {
			return validatorsPerField.keySet().stream()
				.map(attrib -> validate(attrib, record.get(attrib), record, store))
				.filter(Objects::nonNull)
				.reduce(Stream::concat).orElse(Stream.empty());
		}

		protected Stream<Issue> validate(String attrib, List<TripletRecord.Value> values, TripletRecord record, TripletRecordStore store) {
			return validatorsPerField.getOrDefault(attrib, FieldValidator.none()).validate(values, record, store);
		}

		[$attribute+validationMethod...[$NL$NL]]

		[$type+checkType...[$NL$NL]]

		protected boolean isListOfString(String value, TripletRecordStore store) {
			try {
    			java.util.Arrays.stream(value.split(LIST_SEPARATOR)).collect(java.util.stream.Collectors.toList());
    			return true;
    		} catch(Exception e) {
    		 	return false;
    		}
		}

		protected boolean isSetOfString(String value, TripletRecordStore store) {
			try {
    			java.util.Arrays.stream(value.split(LIST_SEPARATOR)).collect(java.util.stream.Collectors.toSet());
    			return true;
    		} catch(Exception e) {
    		 	return false;
    		}
		}

		protected boolean isEntity(String id, TripletRecordStore store) {
			return store.get(id) != null;
		}
	}
end

def type(attribute) trigger(attribValidatorMap)
	validatorsPerField.put("$name+firstLowerCase", this::validate$name+FirstUpperCase);
end

def type(attribute & list) trigger(validationMethod)
	protected Stream<Issue> validate$name+FirstUpperCase~(List<TripletRecord.Value> values, TripletRecord record, TripletRecordStore store) {
		$check+attributeNotDefined
		if(values.size() > 1) return Stream.of(Issue.error(DUPLICATED_ATTRIBUTE, "{"+record.id()+"} " + "$name is defined " + values.size() + " times.").source(values.get(0).source()));
		return isListOf$typeParameter+FirstUpperCase~(values.get(0).get(), store)
			? Stream.empty()
			: Stream.of(Issue.error(INVALID_VALUE, "{"+record.id()+"} " + "$name is an invalid $type: " + values.get(0).get()).source(values.get(0).source()));
	}
end

def type(attribute & set) trigger(validationMethod)
	protected Stream<Issue> validate$name+FirstUpperCase~(List<TripletRecord.Value> values, TripletRecord record, TripletRecordStore store) {
		$check+attributeNotDefined
		if(values.size() > 1) return Stream.of(Issue.error(DUPLICATED_ATTRIBUTE, "{"+record.id()+"} " + "$name is defined " + values.size() + " times.").source(values.get(0).source()));
		return isSetOf$typeParameter+FirstUpperCase~(values.get(0).get(), store)
			? Stream.empty()
			: Stream.of(Issue.error(INVALID_VALUE, "{"+record.id()+"} " + "$name is an invalid $type: " + values.get(0).get()).source(values.get(0).source()));
	}
end

def type(attribute & entity) trigger(validationMethod)
	protected Stream<Issue> validate$name+FirstUpperCase~(List<TripletRecord.Value> values, TripletRecord record, TripletRecordStore store) {
		$check+attributeNotDefined
		if(values.size() > 1) return Stream.of(Issue.error(DUPLICATED_ATTRIBUTE, "{"+record.id()+"} " + "$name is defined " + values.size() + " times.").source(values.get(0).source()));
        return store.get(values.get(0).get()) != null
        	? Stream.empty()
        	: Stream.of(Issue.error(INVALID_REFERENCE, "{"+record.id()+"} " + "$name+FirstUpperCase " + values.get(0).get() + " does not exist.").source(values.get(0).source()));
	}
end

def type(attribute) !type(string) trigger(validationMethod)
	protected Stream<Issue> validate$name+FirstUpperCase~(List<TripletRecord.Value> values, TripletRecord record, TripletRecordStore store) {
		$check+attributeNotDefined
		if(values.size() > 1) return Stream.of(Issue.error(DUPLICATED_ATTRIBUTE, "{"+record.id()+"} " + "$name is defined " + values.size() + " times.").source(values.get(0).source()));
		return is$typename+FirstUpperCase~(values.get(0).get(), store)
			? Stream.empty()
			: Stream.of(Issue.error(INVALID_VALUE, "{"+record.id()+"} " + "$name is an invalid $type: " + values.get(0).get()).source(values.get(0).source()));
	}
end

def type(attribute) type(string) trigger(validationMethod)
	protected Stream<Issue> validate$name+FirstUpperCase~(List<TripletRecord.Value> values, TripletRecord record, TripletRecordStore store) {
		$check+attributeNotDefined
		if(values.size() > 1) return Stream.of(Issue.error(DUPLICATED_ATTRIBUTE, "{"+record.id()+"} " + "$name is defined " + values.size() + " times.").source(values.get(0).source()));
		return Stream.empty();
	}
end

def type(check & required) trigger(attributeNotDefined)
	if(values.isEmpty() || values.get(0).isEmpty()) return Stream.of(Issue.error(MISSING_ATTRIBUTE, "{"+record.id()+"} " + "$name is not defined.").source(record.source()));
end

def type(check & optional & warning) trigger(attributeNotDefined)
	if(values.isEmpty() || values.get(0).isEmpty()) return Stream.of(Issue.warning(MISSING_ATTRIBUTE, "{"+record.id()+"} " + "$name is not defined.").source(record.source()));
end

def type(check) trigger(attributeNotDefined)
	if(values.isEmpty() || values.get(0).isEmpty()) return Stream.empty();
end

def type(type) type(double | long | boolean) trigger(checkType)
	protected boolean is$name+FirstUpperCase~(String value, TripletRecordStore store) {
		try {
			$nameBoxed+FirstUpperCase~.parse$name+FirstUpperCase~(value);
			return true;
		} catch(Exception e) {
		 	return false;
		}
	}
end

def type(type) type(integer) trigger(checkType)
	protected boolean isInteger(String value, TripletRecordStore store) {
		try {
			Integer.parseInt(value);
			return true;
		} catch(Exception e) {
		 	return false;
		}
	}
end

def type(type) type(localdate) trigger(checkType)
	protected boolean is$name+FirstUpperCase~(String value, TripletRecordStore store) {
		try {
			java.time.LocalDate.parse(value, java.time.format.DateTimeFormatter.ofPattern("$format"));
			return true;
		} catch(Exception e) {
		 	return false;
		}
	}
end

def type(type) type(localdatetime) trigger(checkType)
	protected boolean is$name+FirstUpperCase~(String value, TripletRecordStore store) {
		try {
			java.time.LocalDateTime.parse(value, java.time.format.DateTimeFormatter.ofPattern("$format"));
			return true;
		} catch(Exception e) {
		 	return false;
		}
	}
end

def type(type) type(instant) trigger(checkType)
	protected boolean is$name+FirstUpperCase~(String value, TripletRecordStore store) {
		try {
			java.time.Instant.ofEpochMilli(Long.parseLong(value));
			return true;
		} catch(Exception e) {
		 	return false;
		}
	}
end

def type(type) type(list | set) trigger(checkType)
	protected boolean is$typename+FirstUpperCase~Of$typeParameter+FirstUpperCase(String value, TripletRecordStore store) {
		try {
			List<String> list = java.util.Arrays.stream(value.split(LIST_SEPARATOR)).collect(java.util.stream.Collectors.toList());
			for(String item : list)
				if(!is$typeParameter+FirstUpperCase(item, store))
					return false;
			return true;
		} catch(Exception e) {
		 	return false;
		}
	}
end

def type(type) type(map) trigger(checkType)
	protected boolean is$name+FirstUpperCase~(String value, TripletRecordStore store) {
		try {
			java.util.Arrays.stream(value.split(LIST_SEPARATOR))
				.map(e -> e.split(MAP_KEY_VALUE_SEPARATOR))
				.collect(java.util.stream.Collectors.toMap(e -> e$[0$].trim(), e -> e$[1$].trim()));
			return true;
		} catch(Exception e) {
		 	return false;
		}
	}
end

def type(type) type(struct) trigger(checkType)
	protected boolean is$name+FirstUpperCase~(String value, TripletRecordStore store) {
		try {
        	List<String> values = java.util.Arrays.stream(value.split(STRUCT_FIELD_SEPARATOR, -1)).map(v -> v.trim()).collect(java.util.stream.Collectors.toList());
            $struct+call;
            return true;
        } catch(Exception e) {
        	return false;
        }
	}
end

def type(type) type(word) trigger(checkType)
	protected boolean is$name+FirstUpperCase~(String value, TripletRecordStore store) {
		try {
        	$package.$name+FirstUpperCase~.valueOf(value);
            return true;
        } catch(Exception e) {
        	return false;
        }
	}
end

def trigger(call)
	new $package.structs.$name+firstUpperCase($attribute+parse...[, ])
end

def type(boolean) trigger(parse)
	Boolean.parseBoolean(values.get($index))
end

def type(integer) trigger(parse)
	Integer.parseInt(values.get($index))
end

def type(long) trigger(parse)
	Long.parseLong(values.get($index))
end

def type(double) trigger(parse)
	Double.parseDouble(values.get($index))
end

def type(localdate) trigger(parse)
	java.time.LocalDate.parse(values.get($index));
end

def type(localdatetime) trigger(parse)
	java.time.LocalDateTime.parse(values.get($index));
end

def type(instant) trigger(parse)
	java.time.Instant.parse(values.get($index));
end

def trigger(parse)
	values.get($index)
end

def type(entity) !type(abstract) trigger(putValidator)
	validatorsPerType.put("$name+firstLowerCase", new $name+FirstUpperCase~Validator());
end