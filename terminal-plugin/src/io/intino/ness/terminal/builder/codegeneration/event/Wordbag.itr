def type(root)
	package $package+ValidPackage;

	import java.util.ArrayList;
	import java.util.List;
	import java.util.function.Predicate;
	import java.util.stream.Collectors;

	$dimension
end


def type(wordbag & resource)
	public class $name+FirstUpperCase {
		private static final java.util.Map<Integer, Word> words;
		private static final java.util.Map<String, Word> wordsByName;
		public static final Word NA = new Word($column+defaultValue...[, ]);
		static {
			words = new java.util.HashMap<>();
			wordsByName = new java.util.HashMap<>();
			try (java.io.BufferedReader reader = new java.io.BufferedReader(new java.io.InputStreamReader($name+FirstUpperCase.class.getResourceAsStream("/$resource")))) {
				reader.lines().map(l -> l.split("\\t", -1)).
				map(l -> new Word($column+constructor...[, ])).
				forEach(w -> {words.put(w.index, w); wordsByName.put(w.name, w);});
			} catch (java.io.IOException e) {
				io.intino.alexandria.logger.Logger.error(e);
			}
		}

		public static List<Word> words() {
			return new ArrayList<>(words.values());
		}

		public static List<Word> words(Predicate<Word> filter) {
			return words.values().stream().filter(filter).collect(Collectors.toList());
		}

		public static Word categoryByIndex(int index) {
			return words.getOrDefault(index, NA);
		}

		public static Word categoryByName(String name) {
			return wordsByName.getOrDefault(name, NA);
		}

		$column+find...[$NL$NL]

		public static class Word {
			$column+declaration...[$NL]

			Word($column+parameter...[, ]) {
				$column+assign...[$NL]
			}

			public boolean equals(Word category) {
				return this.index == category.index;
			}
		}
	}
end

def type(wordbag)
	public class $name+firstUpperCase {
		private static final java.util.Map<Short, Word> words;
		private static final java.util.Map<String, Word> wordsByName;
		public static final Word NA = new Word((short) 0, "NA");
		$category+field...[$NL]
		static {
			words = new java.util.HashMap<>();
			wordsByName = new java.util.HashMap<>();
			$category+put...[$NL]
		}

		public static List<Word> words() {
			return new ArrayList<>(words.values());
		}

		public static List<Word> words(Predicate<Word> filter) {
			return words.values().stream().filter(filter).collect(Collectors.toList());
		}

		public static Word categoryByIndex(short index) {
			return words.getOrDefault(index, NA);
		}

		public static Word categoryByName(String name) {
			return wordsByName.getOrDefault(name, NA);
		}

		public static Word categoryByLabel(String label) {
			return words.values().stream().filter(c -> c.label.equals(label)).findFirst().orElse(NA);
		}

		public static class Word {
			public final short index;
			public final String name;
			public final String label;

			Word(short index, String name) {
				this(index, name, name);
			}

			Word(short index, String name, String label) {
				this.index = index;
				this.name = name;
				this.label = label;
			}

			public boolean equals(Word category) {
				return this.index == category.index;
			}
		}
	}
end

def trigger(declaration)
	public final $type $name+firstLowerCase;
end

def trigger(parameter)
	$type $name+firstLowerCase
end

def type(string | text) trigger(constructor)
	l.length > $index ? l$[$index] : "NA"
end

def type(integer) trigger(constructor)
	l.length > $index ? Integer.parseInt(l$[$index]) : -1
end

def type(real) trigger(constructor)
	l.length > $index ? Double.parseDouble(l$[$index]) : Double.NaN
end

def type(longInteger | long) trigger(constructor)
	l.length > $index ? Long.parseLong(l$[$index]) : -1L
end

def type(boolean | bool) trigger(constructor)
	l.length > $index ? Boolean.parseBoolean(l$[$index]) : false
end


def type(string | text) trigger(defaultValue)
	"NA"
end

def type(integer) trigger(defaultValue)
	0
end

def type(real) trigger(defaultValue)
	0.
end

def type(longInteger | long) trigger(defaultValue)
	0L
end

def type(boolean | bool) trigger(defaultValue)
	false
end

def trigger(assign)
	this.$name+firstLowerCase = $name+firstLowerCase;
end

def type(primitive) !attribute(index:0) !attribute(index:1) trigger(find)
	public static Word categoryBy$name+firstUpperCase($type $name+firstLowerCase) {
		return words.values().stream().filter(c -> c.$name+firstLowerCase == $name+firstLowerCase).findFirst().orElse(NA);
	}
end

def !attribute(index:0) !attribute(index:1) trigger(find)
	public static Word categoryBy$name+firstUpperCase($type $name+firstLowerCase) {
		return words.values().stream().filter(c -> c.$name+firstLowerCase.equals($name+firstLowerCase)).findFirst().orElse(NA);
	}
end

def trigger(put)
	words.put((short) $index, $name+FirstUpperCase);
	wordsByName.put("$name", $name+FirstUpperCase);
end


def trigger(field)
	public static final Word $name+FirstUpperCase = new Word((short) $index, "$name"[, "$label"]);
end