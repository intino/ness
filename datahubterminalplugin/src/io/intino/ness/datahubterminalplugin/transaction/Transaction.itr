def type(root)
	package $package+ValidPackage;

	$transaction
end

def trigger(transaction)
	public class $name+firstUpperCase extends io.intino.alexandria.led.Transaction {
		[$split]
		public static final int SIZE = $size;

		[$attribute+declaration...[$NL$NL]]

		public $name+firstUpperCase() {
			super(defaultByteStore());
		}

		public $name+firstUpperCase(io.intino.alexandria.led.buffers.store.ByteStore store) {
			super(store);
        }

		public int size() {
			return $size;
		}

		@Override
		public long id() {
			return getAlignedLong(0);
		}

		[$attribute+getter...[$NL$NL]]

		[$attribute+setter...[$NL$NL]]

		private static io.intino.alexandria.led.buffers.store.ByteStore defaultByteStore() {
			java.nio.ByteBuffer buffer = io.intino.alexandria.led.util.MemoryUtils.allocBuffer($size);
			io.intino.alexandria.led.util.MemoryAddress address = io.intino.alexandria.led.util.MemoryAddress.of(buffer);
			return new io.intino.alexandria.led.buffers.store.ByteBufferStore(buffer, address, 0, buffer.capacity());
		}
	}
end


def trigger(split)
	public enum Split {
		$enum+asEnum...[, ];

		public abstract String qn();

		public static Split splitByQn(String qn) {
			return java.util.Arrays.stream(values()).filter(c -> c.qn().equals(qn)).findFirst().orElse(null);
		}
	}
end

def trigger(asEnum)
	$value+snakeCaseToCamelCase {
		public String qn() {
			return "$qn";
		}
	}
end

def type(attribute & integer) trigger(getter)
	public Integer $name+firstLowerCase() {
		return (int) getInteger($offset, $bits);
	}
end

def type(attribute & integer) trigger(setter)
	public $owner+firstUpperCase $name+firstLowerCase($type $name+firstLowerCase) {
		setInteger($offset, $bits, $name+firstLowerCase);
		return this;
	}
end

def type(attribute & boolean) trigger(getter)
	public Boolean $name+firstLowerCase() {
		int value= (int) getInteger($offset, 3)
		return value== NULL ? null : value == 2;
	}
end

def type(attribute & boolean) trigger(setter)
	public $owner+firstUpperCase $name+firstLowerCase($type $name+firstLowerCase) {
		setInteger($offset, $bits, $name+firstLowerCase);
		return this;
	}
end

def type(attribute & double) trigger(getter)
	public Integer $name+firstLowerCase() {
		return getAlignedDouble(io.intino.alexandria.led.util.BitUtils.byteIndex($offset));
	}
end

def type(attribute & double) trigger(setter)
	public $owner+firstUpperCase $name+firstLowerCase($type $name+firstLowerCase) {
		setAlignedDouble(io.intino.alexandria.led.util.BitUtils.byteIndex($offset), $name+firstLowerCase);
		return this;
	}
end

def type(attribute & long) trigger(getter)
	public $type $name+firstLowerCase() {
		return getAlignedLong($offset / Byte.SIZE);
	}
end

def type(attribute & long) trigger(setter)
	public $owner+firstUpperCase $name+firstLowerCase($type $name+firstLowerCase) {
		setAlignedLong($offset / Byte.SIZE, $name+firstLowerCase);
		return this;
	}
end

def type(attribute & datetime) trigger(getter)
	public $type $name+firstLowerCase() {
		return java.time.Instant.ofEpochMilli(getAlignedLong($offset / Byte.SIZE));
	}
end

def type(attribute & datetime) trigger(setter)
	public $owner+firstUpperCase $name+firstLowerCase($type $name+firstLowerCase) {
		setAlignedLong($offset / Byte.SIZE, $name+firstLowerCase.toEpochMilli());
		return this;
	}
end

def type(attribute & wordbag & resource) trigger(getter)
	public $type+firstUpperCase $name+firstLowerCase() {
		final int value = (int) getInteger($offset, $bits);
		return value == NULL ? null : $name+firstUpperCase.values().get(value);
	}
end

def type(attribute & wordbag & resource) trigger(setter)
	public $owner+firstUpperCase $name+firstLowerCase($type $name+firstLowerCase) {
		setInteger($offset, $bits, $name+firstLowerCase == null ? NULL : $name+firstLowerCase.indexOf($name+firstLowerCase));
		return this;
	}
end

def type(attribute & wordbag) trigger(getter)
	public $type+firstUpperCase $name+firstLowerCase() {
		final int value = (int) getInteger($offset, $bits);
		return value == NULL ? null : $name+firstUpperCase.nameOf(value);
	}
end

def type(attribute & wordbag) trigger(setter)
	public $owner+firstUpperCase $name+firstLowerCase($type+FirstUpperCase $name+firstLowerCase) {
		setInteger($offset, $bits, $name+firstLowerCase == null ? NULL : $name+firstLowerCase.value());
		return this;
	}
end


def type(attribute & wordbag & resource) trigger(declaration)
	public static class $name+FirstUpperCase {
		private static final java.util.Map<Integer, String> values;

		static {
			values = new java.io.BufferedReader(new java.io.InputStreamReader($name+firstUpperCase.class.getResourceAsStream("$resource"))).
				lines().map(l -> l.split("\\t")).
				collect(java.util.stream.Collectors.toMap(l -> Integer.parseInt(l$[0]), l -> l$[1]));
		}

		public static java.util.Map<Integer, String> values() {
			return values;
		}

		public static long indexOf(String i) {
			java.util.Map.Entry<Integer, String> e = values.entrySet().stream().filter(en -> en.getValue().equals(i)).findFirst().orElse(null);
			return e == null ? NULL : e.getKey();
		}
	}
end


def type(attribute & wordbag) trigger(declaration)
	public enum $name+firstUpperCase {
		$word...[, ];
		int value;

		$name+firstUpperCase(int value) {
			this.value = value;
		}

		public int value() {
			return value;
		}

		public static $type+firstUpperCase nameOf(int value) {
			return java.util.Arrays.stream(values()).filter(v -> v.value() == value).findFirst().orElse(null);
		}
	}
end



