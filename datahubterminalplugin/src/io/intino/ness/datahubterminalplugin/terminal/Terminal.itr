def type(terminal)
	package $package+validPackage;

	import io.intino.alexandria.Scale;
	import io.intino.alexandria.Timetag;
	import io.intino.alexandria.event.Event;
	import io.intino.alexandria.logger.Logger;
	import org.apache.activemq.command.ActiveMQTextMessage;

	import javax.jms.JMSException;
	import javax.jms.Message;
	import javax.jms.TextMessage;
	import java.io.File;
	import java.time.Instant;
	import java.util.List;
	import java.util.Map;
    import java.util.Collections;
	import java.util.concurrent.TimeUnit;
	import java.util.stream.Collectors;

	import $package+validPackage~.master.Entities;

	public class $name+snakeCaseToCamelCase+firstUpperCase {
		public static String$[] subscriptionChannels = new String$[]{$subscribe+channel};

		private final io.intino.alexandria.terminal.Connector connector;
		private final java.util.Map<java.util.function.BiConsumer<?, String>, List<java.util.function.Consumer<io.intino.alexandria.event.Event>>> consumers = new java.util.HashMap<>();
		$bpm+splits
		private volatile Entities entities;

		public $name+snakeCaseToCamelCase+firstUpperCase(io.intino.alexandria.terminal.Connector connector) {
			this.connector = connector;
		}

		public void publish(Object event, String split) {
			$publish+if...[$NL]
		}

		public Entities entities() {
			return entities != null ? entities : (entities = Entities.get().init(connector));
		}

		public io.intino.alexandria.datalake.Datalake datalake() {
			try {
				Message message = connector.requestResponse("service.ness.datalake.eventstore", request("Datalake"), 5, TimeUnit.SECONDS);
				if(message == null) return null;

				String path = ((TextMessage)message).getText();
				if(path == null) return null;

				return new File(path).exists()
						? new io.intino.alexandria.datalake.file.FileDatalake(new File(path))
						: new io.intino.alexandria.terminal.remotedatalake.RemoteDatalake((io.intino.alexandria.terminal.JmsConnector) connector);

			} catch (JMSException e) {
				Logger.error(e);
				return null;
			}
		}

		public BatchSession batch(java.io.File temporalStageDirectory) {
			return new BatchSession(temporalStageDirectory);
		}

		public BatchSession batch(java.io.File temporalStageDirectory, Config config) {
			return new BatchSession(temporalStageDirectory, config);
		}

		public void publish(io.intino.alexandria.event.SessionEvent session) {
			connector.sendEvent(io.intino.alexandria.event.SessionEvent.PATH, session);
		}

		public void subscribe(SessionEventConsumer onEventReceived) {
			consumers.put(onEventReceived, List.of(event -> onEventReceived.accept(new io.intino.alexandria.event.SessionEvent(event.toMessage()), io.intino.alexandria.event.SessionEvent.PATH)));
			connector.attachListener(io.intino.alexandria.event.SessionEvent.PATH, consumers.get(onEventReceived).get(0));
		}

		$publish...[$NL$NL]

		$subscribe...[$NL$NL]

		public synchronized void requestSeal() {
			connector.requestResponse("service.ness.seal", request("Seal"), 30, TimeUnit.MINUTES);
		}

		public synchronized Instant requestLastSeal() {
			Message message = connector.requestResponse("service.ness.seal.last", request("LastSeal"), 10, TimeUnit.MINUTES);
			if(message == null) return Instant.now();
			try {
				return Instant.parse(((TextMessage)message).getText());
			} catch (Exception e) {
				Logger.error(e);
				return Instant.now();
			}
		}

		private javax.jms.Message request(String type) {
			return request(type, Collections.emptyMap());
		}

		private javax.jms.Message request(String type, Map<String, String> attributes) {
			try {
				ActiveMQTextMessage m = new ActiveMQTextMessage();
				io.intino.alexandria.message.Message message = new io.intino.alexandria.message.Message(type);
				attributes.forEach(message::set);
				m.setText(new Event(message).ts(java.time.Instant.now()).toString());
				return m;
			} catch(Exception e) {
				throw new RuntimeException(e);
			}
		}

		public class BatchSession {
			private final java.io.File temporalStage;
			private final io.intino.alexandria.ingestion.SessionHandler sessionHandler;
			private final io.intino.alexandria.ingestion.EventSession eventSession;
			private final io.intino.alexandria.ingestion.SetSession setSession;
			private final Scale scale;

			public BatchSession(java.io.File temporalStage) {
				this(temporalStage, new Config());
			}

			public BatchSession(java.io.File temporalStage, Config config) {
				this.temporalStage = temporalStage;
				this.scale = config.scale;
				this.sessionHandler = new io.intino.alexandria.ingestion.SessionHandler(temporalStage);
				this.eventSession = sessionHandler.createEventSession(config.eventsBufferSize);
				this.setSession = sessionHandler.createSetSession(config.setsBufferSize);
			}

			public void feed(Event event, String split) {
                eventSession.put(tankOf(event, split), Timetag.of(event.ts(), this.scale), event);
			}

			public void feed(Event event, String split, Scale scale) {
				eventSession.put(tankOf(event, split), Timetag.of(event.ts(), scale), event);
			}

			public void feed(io.intino.alexandria.event.SessionEvent event) {
				eventSession.put(io.intino.alexandria.event.SessionEvent.PATH, Timetag.of(event.ts(), Scale.Day), event);
			}

			public void flush() {
				eventSession.flush();
				setSession.flush();
			}

			public void push(File dataHubStage) {
				eventSession.close();
				setSession.close();
				sessionHandler.pushTo(dataHubStage);
				//connector.sendEvent("service.ness.push", new Event(new io.intino.alexandria.message.Message("Push").set("stage", temporalStage.getName())));
			}

			public void push(String host, String user, String dataHubStageAbsolutePath) {
				eventSession.close();
				setSession.close();
				List<File> files = io.intino.alexandria.ingestion.FS.allFilesIn(temporalStage, path -> path.getName().endsWith(io.intino.alexandria.Session.SessionExtension)).collect(Collectors.toList());
				upload(files, host, user, dataHubStageAbsolutePath);
				temporalStage.renameTo(new File(temporalStage.getParentFile(), temporalStage.getName() + ".treated"));
			}

			public synchronized void seal() {
				connector.requestResponse("service.ness.seal", request("Seal", Map.of("stage", temporalStage.getName())));
        	}

            private void upload(List<File> sessions, String host, String user, String dataHubStageAbsolutePath) {
				try {
					String connectionChain = user + "@" + host + ":" + dataHubStageAbsolutePath;
					Logger.info("Uploading sessions to " + connectionChain + "...");
					for (File s : sessions) {
						Process process = new ProcessBuilder("scp", s.getAbsolutePath(), connectionChain)
								.inheritIO()
								.start();
						process.waitFor(1, java.util.concurrent.TimeUnit.HOURS);
					}
					Logger.info("sessions uploaded");
				} catch (java.io.IOException | InterruptedException ignored) {
				}

			}

            private String tankOf(Event event, String split) {
            	$publish+tankOf...[$NL]
            	return event.toMessage().type();
            }
		}

		public static class Config {
			private int eventsBufferSize = 1_000_000;
			private int setsBufferSize = 1_000_000;
			private Scale scale = Scale.$scale;

			public Config scale(Scale scale) {
				this.scale = scale;
				return this;
			}

			public Config eventsBufferSize(int eventsBufferSize) {
				this.eventsBufferSize = eventsBufferSize;
				return this;
			}

			public Config setsBufferSize(int setsBufferSize) {
				this.setsBufferSize = setsBufferSize;
				return this;
			}
		}

		public interface SessionEventConsumer extends java.util.function.BiConsumer<io.intino.alexandria.event.SessionEvent, String> {
		}

		$event+interface...[$NL$NL]
	}
end

def type(bpm) trigger(splits)
	public enum BpmSplit {
		$split+asEnum...[, ];

		public abstract String qn();

		public static BpmSplit splitByQn(String qn) {
			return java.util.Arrays.stream(values()).filter(c -> c.qn().equals(qn)).findFirst().orElse(null);
		}
	}
end

def trigger(asEnum)
	$value+snakeCaseToCamelCase {
		public String qn() {
			return "$qn";
		}
	}
end

def type(multisplit & bpm) trigger(if)
	if (event instanceof $type) publish(($type) event, BpmSplit.splitByQn(split));
end

def type(multisplit) trigger(if)
	if (event instanceof $type) publish(($type) event, $type.Split.splitByQn(split));
end

def trigger(if)
	if (event instanceof $type) publish(($type) event);
end

def type(multisplit) !type(bpm) trigger(tankOf)
	if (event instanceof $type) return "$typeWithNamespace." + $type.Split.splitByQn(split).qn();
end

def !type(bpm) trigger(tankOf)
	if (event instanceof $type) return "$channel";
end

def type(bpm & multisplit) trigger(publish)
	public void publish($type $typeName+firstLowerCase, BpmSplit split, BpmSplit... moreSplits) {
		connector.sendEvent("$typeWithNamespace." + split.qn(), $typeName+firstLowerCase);
		for (BpmSplit c : moreSplits) connector.sendEvent("$typeWithNamespace." + c.qn(), $typeName+firstLowerCase);
	}
end

def type(bpm) trigger(publish)
	public void publish($type $typeName+firstLowerCase) {
		connector.sendEvent("$channel", $typeName+firstLowerCase);
	}
end

def type(multisplit) !type(bpm) trigger(publish)
	public void publish($type $typeName+firstLowerCase, $type.Split split, $type.Split... moreSplits) {
		connector.sendEvent("$typeWithNamespace." + split.qn(), $typeName+firstLowerCase);
		for ($type.Split c : moreSplits)
			connector.sendEvent("$typeWithNamespace." + c.qn(), $typeName+firstLowerCase);
	}
end

def !type(bpm) trigger(publish)
	public void publish($type $typeName+firstLowerCase) {
		connector.sendEvent("$channel", $typeName+firstLowerCase);
	}
end

def type(bpm & multiSplit) trigger(subscribe)
	public void subscribe($namespaceQn+firstUpperCase$typeName+FirstUpperCase~Consumer onEventReceived, String subscriberId, BpmSplit split, BpmSplit... moreSplits) {
		consumers.putIfAbsent(onEventReceived, new java.util.ArrayList<>());
		List<java.util.function.Consumer<io.intino.alexandria.event.Event>> eventConsumers = consumers.get(onEventReceived);
		java.util.function.Consumer<io.intino.alexandria.event.Event> consumer = event -> onEventReceived.accept(new $type(event), "$typeName+FirstUpperCase." + split.qn());
		connector.attachListener("$typeName+FirstUpperCase." + split.qn(), subscriberId + "_" + split.qn(), consumer);
		eventConsumers.add(consumer);
		for (BpmSplit c : moreSplits) {
			consumer = event -> onEventReceived.accept(new $type(event), "$typeName+FirstUpperCase." + c.qn());
			eventConsumers.add(consumer);
			connector.attachListener("$typeName+FirstUpperCase." + c.qn(), subscriberId + "_" + c.qn(), consumer);
		}
	}

	public void subscribe($namespaceQn+firstUpperCase$typeName+FirstUpperCase~Consumer onEventReceived, BpmSplit split, BpmSplit... moreSplits) {
		consumers.put(onEventReceived, List.of(event -> onEventReceived.accept(new $type(event), "$typeName+FirstUpperCase." + split.qn())));
		List<java.util.function.Consumer<io.intino.alexandria.event.Event>> eventConsumers = consumers.get(onEventReceived);
		java.util.function.Consumer<io.intino.alexandria.event.Event> consumer = event -> onEventReceived.accept(new $type(event), "$typeName." + split.qn());
		connector.attachListener("$typeName+FirstUpperCase." + split.qn(), consumer);
		eventConsumers.add(consumer);
		for (BpmSplit c : moreSplits) {
			consumer = event -> onEventReceived.accept(new $type(event), "$typeName+FirstUpperCase." + c.qn());
			eventConsumers.add(consumer);
			connector.attachListener("$typeName+FirstUpperCase." + c.qn(), consumer);
		}
	}

	public void unsubscribe(ProcessStatusConsumer onEventReceived) {
		consumers.get(onEventReceived).forEach(c -> connector.detachListeners(c));
	}
end

def type(multiSplit) !type(bpm) trigger(subscribe)
	public void subscribe($namespaceQn+firstUpperCase$typeName+FirstUpperCase~Consumer onEventReceived, String subscriberId, $type.Split split, $type.Split... moreSplits) {
		consumers.putIfAbsent(onEventReceived, new java.util.ArrayList<>());
		List<java.util.function.Consumer<io.intino.alexandria.event.Event>> eventConsumers = consumers.get(onEventReceived);
		java.util.function.Consumer<io.intino.alexandria.event.Event> consumer = event -> { try { onEventReceived.accept(new $type(event), "$typeWithNamespace." + split.qn());} catch(Throwable e) { Logger.error(e); }};
		connector.attachListener("$typeWithNamespace." + split.qn(), subscriberId + "_" + split.qn(), consumer);
		eventConsumers.add(consumer);
		for ($type.Split s : moreSplits) {
			consumer = event -> { try { onEventReceived.accept(new $type(event), "$typeWithNamespace." + s.qn());} catch(Throwable e) { Logger.error(e); }};
			connector.attachListener("$typeWithNamespace." + s.qn(), subscriberId + "_" + s.qn(), consumer);
			eventConsumers.add(consumer);
		}
	}

	public void subscribe($namespaceQn+firstUpperCase$typeName+FirstUpperCase~Consumer onEventReceived, String subscriberId, java.util.function.Predicate<Instant> filter, $type.Split split, $type.Split... moreSplits) {
		consumers.putIfAbsent(onEventReceived, new java.util.ArrayList<>());
		List<java.util.function.Consumer<io.intino.alexandria.event.Event>> eventConsumers = consumers.get(onEventReceived);
		java.util.function.Consumer<io.intino.alexandria.event.Event> consumer = event -> { try { onEventReceived.accept(new $type(event), "$typeWithNamespace." + split.qn());} catch(Throwable e) { Logger.error(e); }};
		connector.attachListener("$typeWithNamespace." + split.qn(), subscriberId + "_" + split.qn(), consumer, filter);
		eventConsumers.add(consumer);
		for ($type.Split s : moreSplits) {
			consumer = event -> { try { onEventReceived.accept(new $type(event), "$typeWithNamespace." + s.qn());} catch(Throwable e) { Logger.error(e); }};
			connector.attachListener("$typeWithNamespace." + s.qn(), subscriberId + "_" + s.qn(), consumer, filter);
			eventConsumers.add(consumer);
		}
	}

	public void subscribe($namespaceQn+firstUpperCase$typeName+FirstUpperCase~Consumer onEventReceived, $type.Split split, $type.Split... moreSplits) {
		consumers.putIfAbsent(onEventReceived, new java.util.ArrayList<>());
		List<java.util.function.Consumer<io.intino.alexandria.event.Event>> eventConsumers = consumers.get(onEventReceived);
		java.util.function.Consumer<io.intino.alexandria.event.Event> consumer = event -> onEventReceived.accept(new $type(event), "$typeWithNamespace." + split.qn());
		connector.attachListener("$typeWithNamespace." + split.qn(), consumer);
		eventConsumers.add(consumer);
		for ($type.Split s : moreSplits) {
			consumer = event -> { try { onEventReceived.accept(new $type(event), "$typeWithNamespace." + s.qn());} catch(Throwable e) { Logger.error(e); }};
			connector.attachListener("$typeWithNamespace." + s.qn(), consumer);
			eventConsumers.add(consumer);
		}
	}

	public void unsubscribe($namespaceQn+firstUpperCase$typeName~Consumer onEventReceived) {
		consumers.get(onEventReceived).forEach(c-> connector.detachListeners(c));
	}
end

def trigger(subscribe)
	public void subscribe($namespaceQn+firstUpperCase$typeName+FirstUpperCase~Consumer onEventReceived, String subscriberId) {
		consumers.put(onEventReceived, List.of(event -> { try { onEventReceived.accept(new $type(event), "$channel");} catch(Throwable e) { Logger.error(e); }}));
		connector.attachListener("$channel", subscriberId, consumers.get(onEventReceived).get(0));
	}

	public void subscribe($namespaceQn+firstUpperCase$typeName+FirstUpperCase~Consumer onEventReceived, String subscriberId, java.util.function.Predicate<Instant> filter) {
		consumers.put(onEventReceived, List.of(event -> { try { onEventReceived.accept(new $type(event), "$channel");} catch(Throwable e) { Logger.error(e); }}));
		connector.attachListener("$channel", subscriberId, consumers.get(onEventReceived).get(0), filter);
	}

	public void subscribe($namespaceQn+firstUpperCase$typeName+FirstUpperCase~Consumer onEventReceived) {
		consumers.put(onEventReceived, List.of(event -> { try { onEventReceived.accept(new $type(event), "$channel");} catch(Throwable e) { Logger.error(e); }}));
		connector.attachListener("$channel", consumers.get(onEventReceived).get(0));
	}

	public void unsubscribe($namespaceQn+firstUpperCase$typeName+FirstUpperCase~Consumer onEventReceived) {
		consumers.get(onEventReceived).forEach(c -> connector.detachListeners(c));
	}
end

def trigger(quoted)
	"$this"
end

def trigger(interface)
	public interface $namespaceQn+firstUpperCase$name+firstUpperCase~Consumer extends java.util.function.BiConsumer<$type, String> {
	}
end