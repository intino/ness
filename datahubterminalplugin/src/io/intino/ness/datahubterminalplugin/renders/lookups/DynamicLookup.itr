def type(root)
	package $package+ValidPackage;

	import io.intino.alexandria.logger.Logger;

	import java.sql.*;

	$lookup
end

def type(lookup & dynamic)
	public class $name+FirstUpperCase implements $rootPackage.DynamicLookup {
		private static final Entry NA = new Entry($column+defaultValue...[, ]);
		private final java.sql.Connection connection;
		private Statement getStatement;
		private Statement setStatement;
		private int count = 0;


		public $name+FirstUpperCase(java.sql.Connection connection) {
			this.connection = connection;
		}

		public void open() {
			try {
				this.connection.createStatement().execute("CREATE TABLE IF NOT EXISTS $name+FirstUpperCase ($column+createSql...[, ]);");
				[$index+createOnOpen...[$NL]]
				this.getStatement = connection.createStatement();
				this.setStatement = connection.createStatement();
			} catch (SQLException throwables) {
				Logger.error(throwables);
			}
		}

		public Entry entry($column+idType $column+idName) {
			try {
				ResultSet rs = query("SELECT * FROM $name+FirstUpperCase WHERE $column+idName=" + $column+idName + ";");
				boolean next = rs.next();
				if (!next) return NA;
				$column+getResult...[$NL]
				return new Entry($column+name...[, ]);
			} catch (SQLException e) {
				Logger.error(e);
				return NA;
			}
		}

		[$index+getter...[$NL$NL]]

		[$column+getter...[$NL$NL]]

		[$column+setter...[$NL$NL]]

		public void put($column+parameter...[, ]) {
			try {
				setStatement.addBatch("INSERT INTO $name+FirstUpperCase ($column+name...[, ]) VALUES(" + $column+sqlValue...[ + ", " + ] + ");");
				executeStatement();
			} catch (SQLException e) {
				Logger.error(e);
			}
		}

		public void delete($column+idType $column+idName) {
			try {
				setStatement.addBatch("DELETE FROM $name+FirstUpperCase WHERE $column+idName=" + $column+idName);
				executeStatement();
			} catch (SQLException e) {
				Logger.error(e);
			}
		}

		public void delete($column+parameter...[, ]) {
			try {
				String textStatement = "DELETE FROM $name+FirstUpperCase WHERE ";
				$column+whereFilter...[ + " AND ";$NL];
				setStatement.addBatch(textStatement);
				executeStatement();
			} catch (SQLException e) {
				Logger.error(e);
			}
		}

		public void commit() {
			try {
				setStatement.executeBatch();
				connection.commit();
			} catch (SQLException e) {
				Logger.error(e);
			}
		}

		public void close() {
			try {
				if (connection.isClosed()) return;
				[$index+createOnClose...[$NL]]
				commit();
				connection.close();
			} catch (SQLException e) {
				Logger.error(e);
			}
		}

		private void executeStatement() throws SQLException {
			if (++count % 100_000 != 0) return;
			setStatement.executeBatch();
		}

		private ResultSet query(String query) throws SQLException {
			return getStatement.executeQuery(query);
		}

		public static class Entry {
			$column+declaration...[$NL]

			Entry($column+parameter...[, ]) {
				$column+assign...[$NL]
			}
		}
	}
end


def type(text) trigger(whereFilter)
	if ($name+firstLowerCase != null) textStatement += "$name+firstLowerCase='" + $name+firstLowerCase + "'"
end

def trigger(whereFilter)
	if ($name+firstLowerCase != null) textStatement += "$name+firstLowerCase=" + $name+firstLowerCase
end

def type(column & id) trigger(createSql)
	$name+firstLowerCase $type+sqlType NOT NULL PRIMARY_KEY
end

def type(column) trigger(createSql)
	$name+firstLowerCase $type+sqlType[ $isRequired]
end

def attribute(this:true) trigger(isRequired)
	NOT NULL
end

def type(column & id) trigger(idName)
	$name+firstLowerCase
end
def trigger(idName)
end

def type(column) trigger(name)
	$name+firstLowerCase
end

def type(column & id) trigger(idType)
	$type+FirstUpperCase
end
def type(column) trigger(idType)
end

def type(column) trigger(defaultValue)
	$defaultValue
end

def type(column) type(text) trigger(sqlValue)
	"'" + $name+firstLowerCase + "'"
end

def type(column) trigger(sqlValue)
	$name+firstLowerCase
end

def type(column) trigger(parameter)
	$type+FirstUpperCase $name+firstLowerCase
end

def type(column) !type(id) type(category) trigger(getResult)
	$type $name+firstLowerCase = $lookup.entry(rs.getInt($index));
end

def type(column) !type(id) trigger(getResult)
	$type $name+firstLowerCase = rs.get$type+FirstUpperCase($index);
end

def attribute(this:boolean) trigger(sqlType)
	int
end

def attribute(this:long) trigger(sqlType)
	bigint
end

def attribute(this:string) trigger(sqlType)
	text
end

def type(column) trigger(assign)
	this.$name+firstLowerCase = $name+firstLowerCase;
end

def type(column) trigger(declaration)
	public final $type $name+firstLowerCase;
end

def type(onOpen) trigger(createOnOpen)
	this.connection.createStatement().execute("CREATE INDEX IF NOT EXISTS $name ON $table+FirstUpperCase ($idxColumn+name...[, ]);");
end

def type(onClose) trigger(createOnClose)
	this.connection.createStatement().execute("CREATE INDEX IF NOT EXISTS $name ON $table+FirstUpperCase ($idxColumn+name...[, ]);");
end

def type(text) trigger(whereFilterValue)
	"$name+firstLowerCase='" + $name+firstLowerCase + "'"
end

def trigger(whereFilterValue)
	"$name+firstLowerCase=" + $name+firstLowerCase
end

def type(column) !type(idx) trigger(localField)
	$type $name+firstLowerCase;
end

def type(column) !type(idx) trigger(getResultList)
	$name+firstLowerCase = rs.get$type+FirstUpperCase($index);
end

def type(index) trigger(getter)
	public java.util.List<Entry> entriesBy$name+FirstUpperCase($idxColumn+parameter...[, ]) {
		java.util.List<Entry> result = new java.util.ArrayList<>();
		$column+localField...[$NL]
		try {
			ResultSet rs = query("SELECT * FROM $table+FirstUpperCase WHERE " + $idxColumn+whereFilterValue...[ + ] + ";");
			while (rs.next()) {
				$column+getResultList...[$NL]
				result.add(new Entry($column+name...[, ]));
			}
			return result;
		} catch (SQLException e) {
			Logger.error(e);
			return result;
		}
	}
end

def type(column & text) !type(id) trigger(setter)
	public void $name+firstLowerCase($idColumnType $idColumnName+firstLowerCase, $type value) {
		try {
			this.setStatement.addBatch("UPDATE $table+FirstUpperCase SET $name+firstLowerCase=? WHERE $idColumnName+firstLowerCase='" + value + "';");
			executeStatement();
		} catch (SQLException e) {
			Logger.error(e);
		}
	}
end

def type(column) !type(id) trigger(setter)
	public void $name+firstLowerCase($idColumnType $idColumnName+firstLowerCase, $type value) {
		try {
			this.setStatement.addBatch("UPDATE $table+FirstUpperCase SET $name+firstLowerCase=? WHERE $idColumnName+firstLowerCase=" + value +";");
			executeStatement();
		} catch (SQLException e) {
			Logger.error(e);
		}
	}
end

def type(column) !type(id) trigger(getter)
	public $type $name+firstLowerCase($idColumnType $idColumnName+firstLowerCase) {
		return entry($idColumnName+firstLowerCase).$name+firstLowerCase;
	}
end

def type(column & category) trigger(insert)
	setStatement.set$typePrimitive+FirstUpperCase($index, $name+firstLowerCase.index);
end

def type(column) trigger(insert)
	setStatement.set$typePrimitive+FirstUpperCase($index, $name+firstLowerCase);
end

def trigger(empty)
	,
end