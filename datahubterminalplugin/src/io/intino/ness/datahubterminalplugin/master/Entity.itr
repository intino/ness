def type(entity & class)
	package $package.entities;

	import io.intino.ness.master.model.*;

	import java.time.*;
	import java.util.*;
	import java.util.stream.*;

	public[ $isAbstract+firstLowerCase] class $abstract~$name+FirstUpperCase extends $parent {

		[$attribute+wordDeclaration...[$NL]]

		public $abstract~$name+FirstUpperCase(String id, $datamart+FirstUpperCase~Datamart) {
			$parent+super
		}

		[$attribute+getter...[$NL$NL]]

		[$expression+expressionDeclaration...[$NL$NL]]

		protected Collection<Attribute> initDeclaredAttributes() {
			Collection<Attribute> attributes = super.initDeclaredAttributes();
			[$attribute+initAttribute...[$NL]]
			return attributes;
		}
    }
end

def trigger(super)
	super(id, datamart);
end

def trigger(abstract)
	Abstract
end

def trigger(initAttribute)
	attributes.add("$name", $defaultValue);
end

def type(word) trigger(wordDeclaration)
	public enum $name+firstUpperCase {$value...[, ]}
end

def trigger(expressionDeclaration)
	$modifier $returnType $name([$parameter+parameterDeclaration...[, ]]) {
		$expression
	}
end

def trigger(parameterDeclaration)
	$type $name
end

def type(list | set) type(entity) trigger(getter)
	public $collectionType~<$type~> $name+firstLowerCase() {
		return attribute("$name+firstLowerCase").<Collection<String>>as().stream()
			.map(datamart::$type+firstLowerCase)
			.collect(Collectors.to$collectionType);
	}
end

def type(entity) trigger(getter)
	public $type $name+firstLowerCase() {
		return datamart.$type+firstLowerCase(attribute("$name+firstLowerCase").asString());
	}
end

def trigger(getter)
	public $type $name+firstLowerCase() {
		return attribute("$name+firstLowerCase").value().<$type>as();
	}
end















