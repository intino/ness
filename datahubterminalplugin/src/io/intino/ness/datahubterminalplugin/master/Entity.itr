def type(entity & decorable)
	package $package.entities;

	public class $name+FirstUpperCase extends Abstract$name+FirstUpperCase {

		public $name+FirstUpperCase(String id, $package.MasterTerminal master) {
			super(id, master);
		}
	}
end

def type(entity & class)
	package $package.entities;

	import io.intino.ness.master.model.Triplet;
	import io.intino.ness.master.model.TripletRecord;

	import java.util.List;
	import java.util.ArrayList;
	import java.util.HashMap;
    import java.util.Map;
    import java.util.function.BiConsumer;
	import java.util.Arrays;
	import java.util.stream.Collectors;

	public[ $isAbstract+firstLowerCase] class $abstract~$name+FirstUpperCase extends $parent {

		protected static final String LIST_SEP = ",";

		[$attribute+wordDeclaration...[$NL]]

		protected final $package.MasterTerminal master;

		[$attribute+field...[$NL]]

		public $abstract~$name+FirstUpperCase(String id, $package.MasterTerminal master) {
			$parent+super
			this.master = java.util.Objects.requireNonNull(master);
		}

		[$attribute+getter...[$NL$NL]]

		public $name+FirstUpperCase add(Triplet Triplet) {
			switch(Triplet.predicate()) {
				[$attribute+addSwitchCase...[$NL]]
				default: super.add(Triplet); break;
			}
			return ($name+FirstUpperCase) this;
		}

		public $name+FirstUpperCase remove(Triplet Triplet) {
			switch(Triplet.predicate()) {
				[$attribute+removeSwitchCase...[$NL]]
				default: super.remove(Triplet); break;
			}
			return ($name+FirstUpperCase) this;
		}

		[public List<Triplet> asTriplets() {
			final java.util.ArrayList<Triplet> triplets = new java.util.ArrayList<>();
			$attribute+asTriplet...[$NL]
			triplets.addAll(super.extraTriplets().values());
			return triplets;
		}]

		[$attribute+addAndRemoveMethod...[$NL$NL]]
    }
end

def attribute(this:io.intino.ness.master.model.Entity) trigger(super)
	super(id);
end

def trigger(super)
	super(id, master);
end

def trigger(addSwitchCase)
	case "$name": add$name+FirstUpperCase~(Triplet); break;
end

def trigger(removeSwitchCase)
	case "$name": remove$name+FirstUpperCase~(Triplet); break;
end

def trigger(addAndRemoveMethod)
	protected void add$name+FirstUpperCase~(Triplet Triplet) {
		$attribute+add
	}

	protected void remove$name+FirstUpperCase~(Triplet Triplet) {
    	$attribute+remove
    }
end

def type(boolean) type(list) trigger(add)
	this.$name+firstLowerCase = Triplet.value() == null ? null : Arrays.stream(Triplet.value().split(LIST_SEP)).map(String::trim).map(Boolean::parseBoolean).collect(Collectors.toList());
end

def type(integer) type(list) trigger(add)
	this.$name+firstLowerCase = Triplet.value() == null ? null : Arrays.stream(Triplet.value().split(LIST_SEP)).map(String::trim).map(Integer::parseInt).collect(Collectors.toList());
end

def type(double) type(list) trigger(add)
	this.$name+firstLowerCase = Triplet.value() == null ? null : Arrays.stream(Triplet.value().split(LIST_SEP)).map(String::trim).map(Double::parseDouble).collect(Collectors.toList());
end

def type(long) type(list) trigger(add)
	this.$name+firstLowerCase = Triplet.value() == null ? null : Arrays.stream(Triplet.value().split(LIST_SEP)).map(String::trim).map(Long::parseLong).collect(Collectors.toList());
end

def type(word) type(list) trigger(add)
	this.$name+firstLowerCase = Triplet.value() == null ? null : Arrays.stream(Triplet.value().split(LIST_SEP)).map(String::trim).map($type+firstUpperCase::valueOf).collect(Collectors.toList());
end

def type(string) type(list) trigger(add)
	this.$name+firstLowerCase = Triplet.value() == null ? null : Arrays.stream(Triplet.value().split(LIST_SEP)).map(String::trim).collect(Collectors.toList());
end

def type(entity) type(list) type(component) trigger(add)
	if(Triplet.value() == null) {
		this.$name+firstLowerCase = null;
		return;
	}

	io.intino.ness.master.serialization.MasterSerializer serializer = master.serializer();
	String$[$] items = Triplet.value().split(LIST_SEP);
	this.$name+firstLowerCase = new ArrayList<>(items.length);

	for(String serializedItem : items) {
		TripletRecord item = serializer.deserialize(serializedItem.trim());
		$entity+FirstUpperCase entity = new $entity+FirstUpperCase(item.id(), master);
		this.$name+firstLowerCase.add(entity);
	}
end

def type(entity) type(list) trigger(add)
	this.$name+firstLowerCase = Triplet.value() == null ? null : Arrays.stream(Triplet.value().split(LIST_SEP)).map(String::trim).collect(Collectors.toList());
end

def type(date) type(list) trigger(add)
	this.$name+firstLowerCase = Triplet.value() == null ? null : Arrays.stream(Triplet.value().split(LIST_SEP)).map(String::trim).map(s -> java.time.LocalDate.parse(s, java.time.format.DateTimeFormatter.ofPattern("$format"))).collect(Collectors.toList()));
end

def type(datetime) type(list) trigger(add)
	this.$name+firstLowerCase = Triplet.value() == null ? null : Arrays.stream(Triplet.value().split(LIST_SEP)).map(String::trim).map(s -> java.time.LocalDateTime.parse(s, java.time.format.DateTimeFormatter.ofPattern("$format"))).collect(Collectors.toList()));
end

def type(instant) type(list) trigger(add)
	this.$name+firstLowerCase = Triplet.value() == null ? null : Arrays.stream(Triplet.value().split(LIST_SEP)).map(String::trim).map(s -> java.time.Instant.ofEpochMilli(Long.parseLong(s))).collect(Collectors.toList()));
	this.$name+firstLowerCase = Triplet.value() == null ? null : java.time.Instant.ofEpochMilli(Long.parseLong(Triplet.value()));
end

def type(boolean) trigger(add)
	this.$name+firstLowerCase = Triplet.value() == null ? null : Boolean.parseBoolean(Triplet.value());
end

def type(integer) trigger(add)
	this.$name+firstLowerCase = Triplet.value() == null ? null : Integer.parseInt(Triplet.value());
end

def type(double) trigger(add)
	this.$name+firstLowerCase = Triplet.value() == null ? null : Double.parseDouble(Triplet.value());
end

def type(long) trigger(add)
	this.$name+firstLowerCase = Triplet.value() == null ? null : Long.parseLong(Triplet.value());
end

def type(word) trigger(add)
	this.$name+firstLowerCase = Triplet.value() == null ? null : $type+firstUpperCase.valueOf(Triplet.value());
end

def type(string) trigger(add)
	this.$name+firstLowerCase = Triplet.value();
end

def type(entity) type(component) trigger(add)
	if(Triplet.value() == null) {
		this.$name+firstLowerCase = null;
		return;
	}

	TripletRecord r = master.serializer().deserialize(Triplet.value().trim());
	this.$name+firstLowerCase = new $entity+FirstUpperCase(r.id(), master);
end

def type(entity) trigger(add)
	this.$name+firstLowerCase~Reference = Triplet.value();
end

def type(date) trigger(add)
	this.$name+firstLowerCase = Triplet.value() == null ? null : java.time.LocalDate.parse(Triplet.value(), java.time.format.DateTimeFormatter.ofPattern("$format"));
end

def type(datetime) trigger(add)
	this.$name+firstLowerCase = Triplet.value() == null ? null : java.time.LocalDateTime.parse(Triplet.value(), java.time.format.DateTimeFormatter.ofPattern("$format"));
end

def type(instant) trigger(add)
	this.$name+firstLowerCase = Triplet.value() == null ? null : java.time.Instant.ofEpochMilli(Long.parseLong(Triplet.value()));
end

def type(map) trigger(add)
	this.$name+firstLowerCase = Triplet.value() == null
		? null
		: java.util.Arrays.stream(Triplet.value().split(";"))
			.map(e -> e.split("="))
			.collect(java.util.stream.Collectors.toMap(e -> e$[0].trim(), e -> e$[1].trim()));
end

def type(struct) trigger(add)
	if (Triplet.value() == null) {
		this.$name+firstLowerCase = null;
	} else {
		List<String> values = java.util.Arrays.stream(Triplet.value().split(",", -1)).map(v -> v.trim()).collect(java.util.stream.Collectors.toList());
		this.$name+firstLowerCase = Triplet.value() == null ? null : $struct+call;
	}
end

def type(list) trigger(remove)
	this.$name+firstLowerCase = null;
end

def type(boolean) trigger(remove)
	this.$name+firstLowerCase = false;
end

def type(integer) trigger(remove)
	this.$name+firstLowerCase = 0;
end

def type(double) trigger(remove)
	this.$name+firstLowerCase = 0;
end

def type(long) trigger(remove)
	this.$name+firstLowerCase = 0;
end

def type(entity) type(component) trigger(remove)
	this.$name+firstLowerCase = null;
end

def type(entity) trigger(remove)
	this.$name+firstLowerCase~Reference = null;
end

def trigger(remove)
	this.$name+firstLowerCase = null;
end

def type(struct) trigger(remove)
	this.$name+firstLowerCase = null;
end

def type(word) trigger(asTriplet)
	triplets.add(new Triplet(id().get(), "$name+firstLowerCase", $name+firstLowerCase.name()));
end

def type(entity) type(component) type(list) trigger(asTriplet)
	triplets.add(new Triplet(id().get(), "$name+firstLowerCase", master.serializer().serialize(new TripletRecord($name+firstLowerCase.stream().flatMap(e -> e.asTriplets().stream()).collect(Collectors.toMap(Triplet::subject, t->t))))));
end

def type(entity) type(component) trigger(asTriplet)
	triplets.add(new Triplet(id().get(), "$name+firstLowerCase", String.valueOf($name+firstLowerCase)));
end

def type(entity) type(list) trigger(asTriplet)
	triplets.add(new Triplet(id().get(), "$name+firstLowerCase", String.join(LIST_SEP, $name+firstLowerCase)));
end

def type(entity) trigger(asTriplet)
	triplets.add(new Triplet(id().get(), "$name+firstLowerCase", String.valueOf($name+firstLowerCase~Reference)));
end

def type(date | datetime) trigger(asTriplet)
	triplets.add(new Triplet(id().get(), "$name+firstLowerCase", $name+firstLowerCase~.format(java.time.format.DateTimeFormatter.ofPattern("$format"))));
end

def type(instant) trigger(asTriplet)
	triplets.add(new Triplet(id().get(), "$name+firstLowerCase", String.valueOf($name+firstLowerCase~.toEpochMilli())));
end

def trigger(asTriplet)
	triplets.add(new Triplet(id().get(), "$name+firstLowerCase", String.valueOf($name+firstLowerCase)));
end

def type(word) trigger(wordDeclaration)
	public enum $name+firstUpperCase {$value...[, ]}
end

def type(struct) trigger(field)
	protected $package.structs.$struct+structName $name+firstLowerCase[ = $defaultValue];
end

def type(entity) type(component) type(list) trigger(field)
	protected List<$entity+firstUpperCase> $name+firstLowerCase;
end

def type(entity) type(component) trigger(field)
	protected $entity+firstUpperCase $name+firstLowerCase;
end

def type(entity) type(list) trigger(field)
	protected List<String> $name+firstLowerCase;
end

def type(entity) trigger(field)
	protected String $name+firstLowerCase~Reference;
end

def type(date) trigger(field)
	protected java.time.LocalDate $name+firstLowerCase;
end

def type(datetime) trigger(field)
	protected java.time.LocalDateTime $name+firstLowerCase;
end

def type(instant) trigger(field)
	protected java.time.Instant $name+firstLowerCase;
end

def !type(entity) trigger(field)
	protected $type $name+firstLowerCase[ = $defaultValue];
end

def type(word) trigger(defaultValue)
	$type.$value
end

def trigger(defaultValue)
	$value
end

def type(struct) trigger(getter)
	public $package.structs.$struct+structName $name+firstLowerCase() {
		return this.$name+firstLowerCase;
	}
end

def type(entity) type(component) type(list) trigger(getter)
	public List<$entity+firstUpperCase> $name+firstLowerCase() {
		return $name+firstLowerCase;
	}
end

def type(entity) type(component) trigger(getter)
	public $entity+firstUpperCase $name+firstLowerCase() {
		return $name+firstLowerCase;
	}
end

def type(entity) type(list) trigger(getter)
	public List<$entity+firstUpperCase> $name+firstLowerCase() {
		return $name+firstLowerCase.stream().map(master::$entity+firstLowerCase).collect(Collectors.toList());
	}
end

def type(entity) trigger(getter)
	public $entity+firstUpperCase $name+firstLowerCase() {
		return master.$entity+firstLowerCase($name+firstLowerCase~Reference);
	}
end

def type(date) trigger(getter)
	public java.time.LocalDate $name+firstLowerCase() {
		return this.$name+firstLowerCase;
	}
end

def type(datetime) trigger(getter)
	public java.time.LocalDateTime $name+firstLowerCase() {
		return this.$name+firstLowerCase;
	}
end

def type(instant) trigger(getter)
	public java.time.Instant $name+firstLowerCase() {
		return this.$name+firstLowerCase;
	}
end

def trigger(getter)
	public $type $name+firstLowerCase() {
		return $name+firstLowerCase;
	}
end

def trigger(abstract)
	Abstract
end

def trigger(structName)
	$name+firstUpperCase
end

def trigger(call)
	new $package.structs.$name+firstUpperCase($attribute+parse...[, ])
end

def type(boolean) trigger(parse)
	Boolean.parseBoolean(values.get($index))
end

def type(int) trigger(parse)
	Integer.parseInt(values.get($index))
end

def type(double) trigger(parse)
	Double.parseDouble(values.get($index))
end

def type(date) trigger(parse)
	java.time.LocalDate.parse(values.get($index));
end

def type(datetime) trigger(parse)
	java.time.LocalDateTime.parse(values.get($index));
end

def type(instant) trigger(parse)
	java.time.Instant.parse(values.get($index));
end

def trigger(parse)
	values.get($index)
end