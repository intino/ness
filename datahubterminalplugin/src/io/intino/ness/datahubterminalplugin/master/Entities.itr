def type(master & view)
	package $package;

	import java.util.Arrays;
    import java.util.List;
    import java.util.UUID;
    import java.util.stream.Stream;
    import java.util.stream.Collectors;
    import $package.entities.*;

	public interface EntitiesView {
		$entity+getterSignature...[$NL$NL]
	}
end

def type(master & interface)
	package $package;

	import io.intino.ness.master.messages.Response;
	import io.intino.ness.master.messages.listeners.EntityListener;
	import io.intino.ness.master.messages.listeners.ErrorListener;
	import io.intino.ness.master.model.Entity;
	import io.intino.ness.master.model.TripletRecord;

	import java.util.concurrent.Future;
	import java.util.concurrent.atomic.AtomicReference;

	import $package.entities.*;

	public interface Entities extends EntitiesView {

		Singleton Instance = new Singleton();

		static Entities get() {
			Entities entities = Instance.get();
			if(entities == null) throw new IllegalStateException("Entities is not initialized!");
			return entities;
		}

		void enable(String entityId);
		void disable(String entityId);
		void publish(Entity entity);

		EntitiesView disabled();

		io.intino.ness.master.serialization.MasterSerializer serializer();

		void addErrorListener(ErrorListener listener);

		<T extends Entity> void addEntityListener(String type, EntityListener<T> listener);

		$entity+enable...[$NL$NL]
		$entity+disable...[$NL$NL]

		$entity+entityListener...[$NL$NL]

		@SuppressWarnings("unchecked")
		default <T extends Entity> T asEntity(TripletRecord record) {
			if(record == null) return null;
			switch(record.type()) {
				$entity+asEntitySwitchCase...[$NL]
				default: throw new IllegalArgumentException("Unknown entity type " + record.type());
			}
		}

		/**expectedType must include the : prefix*/
		default String normalizeId(String id, String expectedType) {
			return id.endsWith(expectedType) ? id : id + expectedType;
		}

		final class Singleton {
			private final AtomicReference<Entities> instance = new AtomicReference<>();
			private Singleton() {}
			private Entities get() {
				return instance.get();
			}
			private void set(Entities entities) {
				instance.compareAndSet(null, java.util.Objects.requireNonNull(entities));
			}
		}
	}
end

def type(master & cached)
	package $package;

	import io.intino.alexandria.logger.Logger;
	import io.intino.alexandria.terminal.Connector;
	import io.intino.ness.master.core.MasterInitializationException;
	import io.intino.ness.master.messages.DownloadMasterMessage;
	import io.intino.ness.master.messages.MasterMessageSerializer;
	import io.intino.ness.master.messages.Response;
	import io.intino.ness.master.messages.UpdateMasterMessage;
	import io.intino.ness.master.messages.listeners.EntityListener;
	import io.intino.ness.master.messages.listeners.EntityListener.Event;
	import io.intino.ness.master.messages.listeners.ErrorListener;
	import io.intino.ness.master.model.Entity;
	import io.intino.ness.master.model.Triplet;
	import io.intino.ness.master.model.TripletRecord;
	import io.intino.ness.master.serialization.MasterMapSerializer;
	import io.intino.ness.master.serialization.MasterSerializer;
	import io.intino.ness.master.serialization.MasterSerializers;
	import org.apache.activemq.command.ActiveMQTextMessage;

	import javax.jms.Message;
	import java.time.Instant;
	import java.util.ArrayList;
	import java.util.Collections;
	import java.util.List;
	import java.util.Set;
	import java.util.Map;
	import java.util.concurrent.*;
	import java.util.concurrent.atomic.AtomicBoolean;
	import java.util.stream.Stream;

	import static io.intino.ness.master.messages.DownloadMasterMessage.PROPERTY_ENTITY_SERIALIZER;
	import static io.intino.ness.master.messages.DownloadMasterMessage.PROPERTY_ERROR;
	import static java.util.Objects.requireNonNull;

	import $package+validPackage~.master.Entities;
	import $package+validPackage~.master.EntitiesView;
	import $package.master.entities.*;

	@SuppressWarnings({"rawtypes", "unchecked"})
	public class CachedEntities implements Entities {

		private static final String ENTITIES_TOPIC = "entities";
		private static final String ENTITY_STORE_SERVICE_PATH = "service.ness.datalake.entitystore";

		private static final Set<String> PublishEntities = Set.of([$entity+publishItem...[, ]]);
		private static final Set<String> SubscribeEntities = Set.of([$entity+subscribeItem...[, ]]);

    	$entity+map...[$NL]

		private final Connector connector;
		private final AtomicBoolean initialized = new AtomicBoolean(false);
		private final Map<String, List<EntityListener>> entityListeners = new ConcurrentHashMap<>();
		private final List<ErrorListener> errorListeners = Collections.synchronizedList(new ArrayList<>());
		private final Map<String, CompletableFuture> futures = new ConcurrentHashMap<>();
		private MasterSerializer serializer;
		private final DisabledEntitiesView disabledView = new DisabledEntitiesView();
		private EntitiesMessageConsumer entityConsumer;

    	CachedEntities(Connector connector) {
    		this.connector = requireNonNull(connector);
    	}

		synchronized void init() {
			try {
				if(!initialized.compareAndSet(false, true)) return;
				loadData();
				initListeners();
				Logger.info("Entities terminal " + connector.clientId() + " initialized successfully. (" + getClass().getSimpleName() + ")");
			} catch(Exception e) {
				throw new MasterInitializationException("Entities failed to start: " + e.getMessage(), e);
			}
		}

		@Override
		public void addErrorListener(ErrorListener listener) {
			if(listener == null) throw new NullPointerException("ErrorListener cannot be null");
			errorListeners.add(listener);
		}

		@Override
    	public <T extends Entity> void addEntityListener(String type, EntityListener<T> listener) {
    		if(type == null) throw new NullPointerException("Type cannot be null");
    		if(listener == null) throw new NullPointerException("EntryListener cannot be null");
    		entityListeners.computeIfAbsent(type, k -> new ArrayList<>(1)).add(listener);
    	}

		@Override
    	public MasterSerializer serializer() {
        	return serializer;
        }

    	$entity+getter...[$NL$NL]

    	@Override
    	public void enable(String id) {
            if(id == null || id.isBlank()) throw new NullPointerException("Entity id cannot be null nor blank");
            if(publishIsDisabledFor(Triplet.typeOf(id))) throw new UnsupportedOperationException("This terminal is not subscribed to " + capitalize(Triplet.typeOf(id)));
            UpdateMasterMessage message = createMessage(UpdateMasterMessage.Intent.Enable, id);
			this.entityConsumer.accept(message);
            publishMessage(message);
    	}

      	@Override
      	public void disable(String id) {
            if(id == null || id.isBlank()) throw new NullPointerException("Entity id cannot be null nor blank");
            if(publishIsDisabledFor(Triplet.typeOf(id))) throw new UnsupportedOperationException("This terminal is not subscribed to " + capitalize(Triplet.typeOf(id)));
            UpdateMasterMessage message = createMessage(UpdateMasterMessage.Intent.Disable, id);
            this.entityConsumer.accept(message);
            publishMessage(message);
      	}

		@Override
    	public void publish(Entity entity) {
			if(entity == null) throw new NullPointerException("Entity cannot be null");
			if(publishIsDisabledFor(entity.id().type())) throw new UnsupportedOperationException("This terminal is not subscribed to " + capitalize(entity.id().type()));
			UpdateMasterMessage message = createMessage(UpdateMasterMessage.Intent.Publish, serializer().serialize(entity.asTripletRecord()));
			this.entityConsumer.accept(message);
			publishMessage(message);
    	}

    	private static boolean publishIsDisabledFor(String type) {
    		return !PublishEntities.contains(capitalize(type));
    	}

    	private static String capitalize(String s) {
    		return Character.toUpperCase(s.charAt(0)) + s.substring(1);
    	}

    	private void waitFor(Future<?> future) {
    		try {
    			future.get();
    		} catch(Exception e) {
    			throw new RuntimeException(e);
    		}
    	}

    	private void publishMessage(UpdateMasterMessage message) {
    		connector.sendTopicMessage(ENTITIES_TOPIC, MasterMessageSerializer.serialize(message));
    	}

    	@Override
    	public EntitiesView disabled() {
    		return disabledView;
    	}

    	private UpdateMasterMessage createMessage(UpdateMasterMessage.Intent intent, String value) {
    		return new UpdateMasterMessage(connector.clientId(), intent, value);
    	}

    	private boolean isEnabled(TripletRecord record) {
    		String enabledValue = record.getValue("enabled");
            return enabledValue == null || "true".equalsIgnoreCase(enabledValue);
    	}

    	private boolean isDisabled(TripletRecord record) {
    		return !isEnabled(record);
    	}

    	protected Event.Type addEntityInternal(TripletRecord record) {
    		switch(record.type()) {
    			$entity+addEntitySwitchCase...[$NL]
    		}
    		return Event.Type.None;
    	}

    	protected Event.Type enableEntityInternal(String id) {
    		switch(Triplet.typeOf(id)) {
    			$entity+enableEntitySwitchCase...[$NL]
    		}
    		return Event.Type.None;
    	}

    	protected Event.Type disableEntityInternal(String id) {
    		switch(Triplet.typeOf(id)) {
    			$entity+disableEntitySwitchCase...[$NL]
    		}
    		return Event.Type.None;
    	}

    	$entity+addEntityInternal...[$NL$NL]

    	$entity+enableEntityInternal...[$NL$NL]

    	$entity+disableEntityInternal...[$NL$NL]

		protected void initListeners() {
			this.entityConsumer = new EntitiesMessageConsumer();
			connector.attachListener(ENTITIES_TOPIC, connector.clientId() + "-" + ENTITIES_TOPIC, entityConsumer);
		}

		private void loadData() {
			Logger.debug("Loading data from master...");
    		long start = System.currentTimeMillis();
			initializeEntityMaps(downloadMasterData(DownloadMasterMessage.EntityFilter.AllEntities));
			long time = System.currentTimeMillis() - start;
			Logger.debug("Data from master loaded in " + time + " ms");
		}

		private Map<String, String> downloadMasterData(DownloadMasterMessage.EntityFilter filter) {
			try {
				Message message = connector.requestResponse(ENTITY_STORE_SERVICE_PATH, downloadMessage(filter));
				return handleResponse(message);
			} catch (Exception e) {
				throw new MasterInitializationException("Could not load data from master: " + e.getMessage(), e);
			}
		}

		private Message downloadMessage(DownloadMasterMessage.EntityFilter filter) {
			try {
				DownloadMasterMessage m = new DownloadMasterMessage(SubscribeEntities, filter);
				ActiveMQTextMessage message = new ActiveMQTextMessage();
				message.setText(MasterMessageSerializer.serialize(m));
				message.compress();
				return message;
			} catch (Exception e) {
				throw new RuntimeException(e);
			}
		}

		private Map<String, String> handleResponse(javax.jms.Message message) throws Exception {
			if(message.getBooleanProperty(PROPERTY_ERROR)) {
				throw new RuntimeException(((ActiveMQTextMessage) message).getText());
			}
			this.serializer = MasterSerializers.get(message.getStringProperty(PROPERTY_ENTITY_SERIALIZER));
			String serializedMap = ((ActiveMQTextMessage) message).getText();
			return MasterMapSerializer.deserialize(serializedMap);
		}

		private void initializeEntityMaps(Map<String, String> entities) {
			if(availableThreads() >= 4)
				loadDataMultiThread(entities, serializer);
			else
				loadDataSingleThread(entities, serializer);
		}

		private void loadDataSingleThread(Map<String, String> entities, MasterSerializer serializer) {
			entities.forEach((id, serializedRecord) -> addEntityInternal(serializer.deserialize(serializedRecord)));
		}

		private void loadDataMultiThread(Map<String, String> entities, MasterSerializer serializer) {
			try {
				ExecutorService threadPool = Executors.newFixedThreadPool(availableThreads());
				entities.forEach((id, serializedRecord) -> threadPool.submit(() -> addEntityInternal(serializer.deserialize(serializedRecord))));
				threadPool.shutdown();
				threadPool.awaitTermination(1, TimeUnit.HOURS);
			} catch (Exception e) {
				throw new RuntimeException(e);
			}
		}

		private static int availableThreads() {
			return Runtime.getRuntime().availableProcessors() - 1;
		}

		private class EntitiesMessageConsumer implements Connector.MessageConsumer {

			@Override
			public void accept(String rawMessage, String callback) {
				accept((UpdateMasterMessage) MasterMessageSerializer.deserialize(rawMessage));
			}

			public void accept(UpdateMasterMessage message) {
				try {
					TripletRecord record = serializer().tryDeserialize(message.value()).orElse(null);
					Event.Type type = process(message, record, message.value());
					MasterEntityEvent<?> event = new MasterEntityEvent<>();
					event.type = type;
					event.ts = message.ts();
					event.messageId = message.id();
					event.clientName = message.clientName();
					event.entity = asEntity(record);
					event.entityId = new Entity.Id(record != null ? record.id() : message.value());
					event.value = message.value();
					notifyEntityListeners(event);
				} catch (Throwable e) {
					handleError(message, e);
				}
			}

			private void handleError(UpdateMasterMessage message, Throwable e) {
				notifyErrorListeners(new ErrorListener.Error() {
					@Override
					public Instant ts() {
						return message.ts();
					}

					@Override
					public Throwable cause() {
						return e;
					}

					@Override
					public String clientName() {
						return message.clientName();
					}

					@Override
					public String messageId() {
						return message.id();
					}
				});
			}

			protected Event.Type process(UpdateMasterMessage message, TripletRecord record, String value) {
				switch(message.intent()) {
					case Publish: return addEntityInternal(record);
					case Enable: return enableEntityInternal(value);
					case Disable: return disableEntityInternal(record.id());
				}
				throw new IllegalArgumentException("Unknown intent " + message.intent());
			}

			@SuppressWarnings("all")
			protected void notifyEntityListeners(Event<?> event) {
				CompletableFuture<Response<?>> future = futures.remove(event.messageId());
				if(future != null) future.complete(Response.ofSuccessful(event));
				List<EntityListener> listeners = entityListeners.get(event.entityId().type());
				if(listeners != null) listeners.forEach(listener -> listener.notify(event));
			}

			@SuppressWarnings("all")
			protected void notifyErrorListeners(ErrorListener.Error error) {
				CompletableFuture<Response<?>> future = futures.remove(error.messageId());
				if(future != null) future.complete(Response.ofFailure(error));
				errorListeners.forEach(listener -> listener.notify(error));
			}
		}

		public static class MasterEntityEvent<T extends Entity> implements Event<T> {

			private String clientName;
			private Type type;
			private Entity.Id entityId;
			private T entity;
			private String value;
			private Instant ts;
			private String messageId;

			private MasterEntityEvent() {}

			@Override
			public String clientName() {
				return clientName;
			}

			@Override
			public Type type() {
				return type;
			}

			@Override
			public Entity.Id entityId() {
				return entityId;
			}

			@Override
			public T entity() {
				return entity;
			}

			@Override
			public String value() {
				return value;
			}

			@Override
			public Instant ts() {
				return ts;
			}

			@Override
			public String messageId() {
				return messageId;
			}
		}

		private class DisabledEntitiesView implements EntitiesView {

			$entity+map...[$NL]

    		$entity+getter...[$NL$NL]
		}
    }
end

def type(publish) trigger(publishItem)
	"$name+FirstUpperCase"
end

def type(subscribe) trigger(subscribeItem)
	"$name+FirstUpperCase"
end

def !type(abstract) type(subscribe) trigger(addEntitySwitchCase)
	case "$name+firstLowerCase": return addTo$name+FirstUpperCase~Internal(record);
end

def !type(abstract) type(subscribe) trigger(enableEntitySwitchCase)
	case "$name+firstLowerCase": return enable$name+FirstUpperCase~Internal(id);
end

def !type(abstract) type(subscribe) trigger(disableEntitySwitchCase)
	case "$name+firstLowerCase": return disable$name+FirstUpperCase~Internal(id);
end

def !type(abstract) type(subscribe) trigger(map)
	private final Map<String, $package.entities.$name+FirstUpperCase> $name+FirstLowerCase~Map = new ConcurrentHashMap<>();
end

def !type(abstract) type(subscribe) trigger(addEntityInternal)
	private Event.Type addTo$name+FirstUpperCase~Internal(TripletRecord record) {
		$package.entities.$name+FirstUpperCase entity = new $package.entities.$name+FirstUpperCase(record.id());
    	record.triplets().forEach(entity::add);
    	if (!entity.enabled()) {
        	disabledView.$name+firstLowerCase~Map.put(record.id(), entity);
        	return Event.Type.None;
        }
    	$name+FirstUpperCase old = $name+firstLowerCase~Map.get(record.id());
    	if (entity.deepEquals(old)) return Event.Type.None;
    	$name+firstLowerCase~Map.put(record.id(), entity);
    	return old == null ? Event.Type.Create : Event.Type.Update;
    }
end

def !type(abstract) type(subscribe) trigger(enableEntityInternal)
	private Event.Type enable$name+FirstUpperCase~Internal(String id) {
		if($name+firstLowerCase~Map.containsKey(id)) return Event.Type.None;
		$package.entities.$name+FirstUpperCase entity = disabledView.$name+firstLowerCase~Map.remove(id);
		if (entity == null) return Event.Type.None;
		entity.add(new Triplet(id, "enabled", "true"));
    	$name+firstLowerCase~Map.put(id, entity);
    	return Event.Type.Enable;
    }
end

def !type(abstract) type(subscribe) trigger(disableEntityInternal)
	private Event.Type disable$name+FirstUpperCase~Internal(String id) {
		if(!$name+firstLowerCase~Map.containsKey(id)) return Event.Type.None;

    	$package.entities.$name+FirstUpperCase entity = $name+firstLowerCase~Map.remove(id);
    	if(entity == null) return Event.Type.None;

    	entity.add(new Triplet(id, "enabled", "false"));
    	disabledView.$name+firstLowerCase~Map.put(id, entity);

    	return Event.Type.Disable;
    }
end

def type(subclass) trigger(getById)
	case "$name+lowerCase": return $name+firstLowerCase(id);
end

def type(subclass) trigger(getAllStream)
	$name+Plural+firstLowerCase()
end

def type(abstract) trigger(getter)
	@Override
	public $package.entities.$name+FirstUpperCase $name+firstLowerCase(String id) {
		if(id == null) return null;
    	switch(Triplet.typeOf(id)) {
    		$subclass+getById...[$NL]
    	}
    	return null;
	}

	@Override
	public Stream<$package.entities.$name+FirstUpperCase> $name+Plural+firstLowerCase() {
		return Stream.of(
			$subclass+getAllStream...[,$NL]
		).flatMap(java.util.function.Function.identity());
	}
end

def !type(abstract) type(subscribe) trigger(getter)
	@Override
	public $package.entities.$name+FirstUpperCase $name+firstLowerCase(String id) {
		if(id == null) return null;
		return $name+firstLowerCase~Map.get(normalizeId(id, ":$name+firstLowerCase"));
	}

	@Override
	public Stream<$package.entities.$name+FirstUpperCase> $name+Plural+firstLowerCase() {
		return $name+firstLowerCase~Map.values().stream();
	}
end

def !type(abstract) trigger(getter)
	@Override
	public $package.entities.$name+FirstUpperCase $name+firstLowerCase(String id) {
		throw new UnsupportedOperationException("This terminal is not subscribed to $name+FirstUpperCase");
	}

	@Override
	public Stream<$package.entities.$name+FirstUpperCase> $name+Plural+firstLowerCase() {
		throw new UnsupportedOperationException("This terminal is not subscribed to $name+FirstUpperCase");
	}
end

def trigger(getterSignature)
	$package.entities.$name+FirstUpperCase $name+firstLowerCase(String id);
	Stream<$package.entities.$name+FirstUpperCase> $name+Plural+firstLowerCase();
	default List<$package.entities.$name+FirstUpperCase> $name+firstLowerCase~List() {return $name+Plural+firstLowerCase().collect(Collectors.toList());}
end

def trigger(entityListener)
	default void add$name+FirstUpperCase~EntityListener(EntityListener<$package.entities.$name+FirstUpperCase> listener) {
		addEntityListener("$name+firstLowerCase", listener);
	}
end

def type(entity) !type(abstract) trigger(asEntitySwitchCase)
	case "$name+firstLowerCase": return (T) new $package.entities.$name+FirstUpperCase(record);
end

def type(entity) !type(abstract) trigger(enable)
	default void enable$name+FirstUpperCase(String id) {
		if(id == null) throw new NullPointerException("Id cannot be null");
		enable(normalizeId(id, "$name+firstLowerCase"));
	}
end

def type(entity) !type(abstract) trigger(disable)
	default void disable$name+FirstUpperCase(String id) {
		if(id == null) throw new NullPointerException("Id cannot be null");
		disable(normalizeId(id, "$name+firstLowerCase"));
	}
end