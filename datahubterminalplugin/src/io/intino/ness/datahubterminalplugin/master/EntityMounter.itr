def type(mounter & interface)
	package $package;

    public interface $datamart+FirstUpperCase~Mounter {

    	void mount(io.intino.alexandria.event.Event event);

    	default void update($datamart+FirstUpperCase~Entity entity, String attribute, Object value) {
    		entity.updateAttribute(attribute, value);
    	}

       	default void update($datamart+FirstUpperCase~Struct struct, String attribute, Object value) {
       		struct.updateAttribute(attribute, value);
       	}

    	enum Operation {
    		Create, Update, Remove, Skip
    	}
    }
end

def !type(abstract) type(mounter) type(message)
	package $package.mounters;

	import io.intino.ness.master.Datamart.EntityListener;
	import $ontologypackage.$datamart+FirstUpperCase~Datamart;

	import java.time.*;
	import java.util.*;
	import java.util.stream.*;

	import io.intino.alexandria.event.Event;
	import io.intino.alexandria.event.message.MessageEvent;
	import io.intino.alexandria.message.Message;
	import $ontologypackage.$datamart+FirstUpperCase~Entity;
	import $ontologypackage.entities.$name+FirstUpperCase;

	import static $package.$datamart+FirstUpperCase~Mounter.Operation.*;

	public class $name+FirstUpperCase~Mounter implements $package.$datamart+FirstUpperCase~Mounter {

		private final $datamart+FirstUpperCase~Datamart.Entities entities;
		private final List<EntityListener> listeners;

		public $name+FirstUpperCase~Mounter($datamart+FirstUpperCase~Datamart.Entities entities, List<EntityListener> listeners) {
			this.entities = entities;
			this.listeners = listeners;
		}

		@Override
		public void mount(Event event) {
			Message message = ((MessageEvent)event).toMessage();
			String id = message.get("id").asString();
			Operation$[$] operation = {Update};
			$datamart+FirstUpperCase~Entity entity = findOrCreateEntity(id, operation);
			updateAttributes(message, operation, entity);
			if(operation$[0$] != Skip) notifyListeners(operation$[0$], entity);
		}

		private void updateAttributes(Message message, Operation$[$] operation, $datamart+FirstUpperCase~Entity owner) {
			for(String attr : message.attributes()) {
				update(owner, attr, parse(attr, message));
				if(attr.equals("enabled") && !message.get("enabled").asBoolean()) {
					operation$[0$] = operation$[0$] == Create ? Skip : Remove;
					entities.remove(owner.id());
					return;
				}
			}

			[Map<String, List<Message>> components = message.components().stream().collect(Collectors.groupingBy(Message::type));$NL~$struct+setStructComponent...[$NL]]
		}

		private $datamart+FirstUpperCase~Entity findOrCreateEntity(String id, Operation$[$] operation) {
			$datamart+FirstUpperCase~Entity entity = entities.get($package.entities.$name+FirstUpperCase.definition, id);
			if(entity == null) {
				entity = new $name+FirstUpperCase(id, entities.datamart());
				entities.add(entity);
				operation$[0$] = Create;
			}
			return entity;
		}

		private void notifyListeners(Operation operation, $datamart+FirstUpperCase~Entity entity) {
			for(EntityListener listener : listeners) {
				switch(operation) {
					case Create: listener.onCreate(entity); break;
					case Update: listener.onUpdate(entity); break;
					case Remove: listener.onRemove(entity); break;
				}
			}
		}

		private Object parse(String attribute, Message message) {
			if(message.get(attribute).isNull()) return null;
			switch(attribute) {
				[$attribute+parseSwitchCase...[$NL]]
			}
			return null;
		}

		[$attribute+parseMethod...[$NL$NL]]

		[$struct+factory...[$NL$NL]]
	}
end

def type(struct) trigger(factory)
	 private class $name~StructFactory {

		private List<$package.$fullName> create(List<Message> components) {
    		List<$package.$fullName> structs = new ArrayList<>();
    		for(Message component : components) structs.add(create(component));
    		return structs;
		}

		private $package.$fullName create(Message component) {
			$package.$fullName owner = new $package.$fullName(entities.datamart());
			for(String attrib : component.attributes()) {
				update(owner, attrib, this.parse(attrib, component));
			}

			[Map<String, List<Message>> components = component.components().stream().collect(Collectors.groupingBy(Message::type));$NL~$struct+setStructComponent...[$NL]]

			return owner;
		}

	 	private Object parse(String attribute, Message message) {
        	if(message.get(attribute).isNull()) return null;
        	switch(attribute) {
        		[$attribute+parseSwitchCase...[$NL]]
        	}
        	return null;
        }

        [$attribute+parseMethod...[$NL$NL]]

        [$struct+factory...[$NL$NL]]
	 }
end

def type(multiple) trigger(setStructComponent)
if(components.containsKey("$typename")) update(owner, "$attribName+firstLowerCase", new $name~StructFactory().create(components.get("$typename")));
end

def trigger(setStructComponent)
if(components.containsKey("$typename")) update(owner, "$attribName+firstLowerCase", new $name~StructFactory().create(components.get("$typename").get(0)));
end

def trigger(parseSwitchCase)
	case "$name": return parse$name+FirstUpperCase~(message);
end

def type(attribute) type(list) type(entity) trigger(parseMethod)
	private java.util.List<String> parse$name+FirstUpperCase(Message m) {
		var value = m.get("$name");
		return value.data().isEmpty() ? java.util.Collections.emptyList() : value.asList(String.class);
	}
end

def type(attribute) type(set) type(entity) trigger(parseMethod)
	private java.util.Set<String> parse$name+FirstUpperCase(Message m) {
		var value = m.get("$name");
		return value.data().isEmpty() ? java.util.Collections.emptySet() : value.asSet(String.class);
	}
end

def type(attribute) type(list | set) type(date | datetime) trigger(parseMethod)
	private static final java.time.format.DateTimeFormatter $name+FirstUpperCase~Formatter = java.time.format.DateTimeFormatter.ofPattern("$format");
	private $type parse$name+FirstUpperCase(Message m) {
		try {
			return java.util.Arrays.stream(m.get("$name").as(String$[$].class))
				.map(s -> {try{return $typeParameter.parse(s, $name+FirstUpperCase~Formatter);}catch(Exception ignored){return null;}})
				.filter(java.util.Objects::nonNull)
				.collect(java.util.stream.Collectors.to$collectionType+FirstUpperCase());
		} catch(Exception ignored) {
			return $defaultValue;
		}
	}
end

def type(attribute) type(list) trigger(parseMethod)
	private java.util.List<$typeParameter> parse$name+FirstUpperCase(Message m) {
		var value = m.get("$name");
		return value.data().isEmpty() ? java.util.Collections.emptyList() : value.asList($typeParameter~.class);
	}
end

def type(attribute) type(set) trigger(parseMethod)
	private java.util.Set<$typeParameter> parse$name+FirstUpperCase(Message m) {
		var value = m.get("$name");
		return value.data().isEmpty() ? java.util.Collections.emptySet() : value.asSet($typeParameter~.class);
	}
end

def type(attribute) type(entity) trigger(parseMethod)
	private String parse$name+FirstUpperCase(Message m) {
		return m.get("$name").asString();
	}
end

def type(attribute) type(struct) trigger(parseMethod)
	private $type parse$name+FirstUpperCase(Message m) {
		return m.get("$name").as($type~.class);
	}
end

def type(attribute) type(map) trigger(parseMethod)
	private java.util.Map<String, String> parse$name+FirstUpperCase(Message m) {
		var value = m.get("$name");
		return value.data().isEmpty() ? java.util.Collections.emptyMap() : value.as(java.util.Map.class);
	}
end

def type(attribute) type(date | datetime) trigger(parseMethod)
	private static final java.time.format.DateTimeFormatter $name+FirstUpperCase~Formatter = java.time.format.DateTimeFormatter.ofPattern("$format");
	private $type parse$name+FirstUpperCase(Message m) {
		try {
			return $type.parse((m.get("$name").asString()), $name+FirstUpperCase~Formatter);
		} catch(Exception ignored) {
			return $defaultValue;
		}
	}
end

def type(attribute) type(word) trigger(parseMethod)
	private $package.entities.$type parse$name+FirstUpperCase(Message m) {
		try {
			return $package.entities.$type.valueOf(m.get("$name").asString());
		} catch(Exception ignored) {
			return $defaultValue;
		}
	}
end

def type(attribute) trigger(parseMethod)
	private $type parse$name+FirstUpperCase(Message m) {
		return m.get("$name").as($type~.class);
	}
end
