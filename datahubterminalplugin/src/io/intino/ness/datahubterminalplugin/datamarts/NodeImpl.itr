def type(timelineNode & default) trigger(nodeImpl)

	private class TimelineNodeImpl implements TimelineNode {

		private final String id;
		private final String type;
		private volatile File file;
		private volatile boolean hasDirectAccessToFile;
		private volatile io.intino.sumus.chronos.TimelineStore timelineFile;
		private volatile ChangeListener listener;
		private volatile boolean disposed;

		private TimelineNodeImpl(String id, String type) {
			this(id, type, null);
		}

		private TimelineNodeImpl(String id, String type, File file) {
			this.id = requireNonNull(id);
			this.type = requireNonNull(type);
			this.file = file;
			this.hasDirectAccessToFile = file != null;
		}

		@Override
		public String id() {
			return id;
		}

		@Override
		public String type() {
			return type;
		}

		@Override
        public boolean exists() {
        	try {
        		return timelineFile() != null;
        	} catch(TimelineNotAvailableException e) {
        		return false;
        	}
        }

		@Override
		public void dispose() {
			synchronized(this) {
				if (disposed) return;
				clearCache();
				listener = null;
				timelines.remove(id + ":" + type);
				disposed = true;
			}
		}

		@Override
		public io.intino.sumus.chronos.TimelineStore.TimeModel timeModel() throws TimelineNotAvailableException {
			return timelineFile().timeModel();
		}

		@Override
		public io.intino.sumus.chronos.TimelineStore.SensorModel sensorModel() throws TimelineNotAvailableException {
			return timelineFile().sensorModel();
		}

		@Override
		public Instant first() throws TimelineNotAvailableException {
			return timelineFile().first();
		}

		@Override
		public Instant last() throws TimelineNotAvailableException {
			return timelineFile().last();
		}

		@Override
		public io.intino.sumus.chronos.Timeline get() throws TimelineNotAvailableException {
			synchronized(this) {
				if (disposed) throw new TimelineNotAvailableException("This " + getClass().getSimpleName() + " is disposed.");
				try {
					return timelineFile().timeline();
				} catch(Exception e) {
					throw new TimelineNotAvailableException(e);
				}
			}
		}

		private io.intino.sumus.chronos.TimelineStore timelineFile() throws TimelineNotAvailableException {
			synchronized(this) {
				if (disposed) throw new TimelineNotAvailableException("This " + getClass().getSimpleName() + " is disposed.");
				try {
					if (hasDirectAccessToFile && file != null && file.exists()) return loadFile();
					if (timelineFile != null) return timelineFile;
					return timelineFile = downloadFromDatahub();
				} catch(Exception e) {
					throw new TimelineNotAvailableException(e);
				}
			}
		}

		@Override
		public void setChangeListener(ChangeListener listener) {
			this.listener = listener;
		}

		private void notifyChange() {
			synchronized(this) {
				if (disposed) return;
				try {
					clearCache();
					if (listener != null) listener.notifyChange(this);
				} catch(Throwable ignored) {}
			}
		}

		private void clearCache() {
			timelineFile = null;
			if(!hasDirectAccessToFile) file = null;
		}

		private io.intino.sumus.chronos.TimelineStore loadFile() throws Exception {
			return io.intino.sumus.chronos.TimelineStore.of(file);
		}

		private io.intino.sumus.chronos.TimelineStore downloadFromDatahub() throws Exception {
			javax.jms.Message response = requestResponseFromDatahub(
				"get-timeline=" + id(),
			 	request(TimelineNode.AlwaysDownloadFromDatahub.get() ? "download" : "path"));
			if (!response.getBooleanProperty("success")) throw new TimelineNotAvailableException("Could not get timeline " + id + " because datahub returned success=false in the response");;
			if (response instanceof javax.jms.TextMessage textResponse) {
				file = getFile(textResponse);
				hasDirectAccessToFile = true;
				if (file != null && file.exists()) return loadFile();
				file = null;
				hasDirectAccessToFile = false;
				response = requestResponseFromDatahub("get-timeline=" + id(), request("download"));
			}
			if (!response.getBooleanProperty("success")) throw new TimelineNotAvailableException("Could not get timeline " + id + " because datahub returned success=false in the response");;
			return readFromBytes((javax.jms.BytesMessage) response);
		}

		private io.intino.sumus.chronos.TimelineStore readFromBytes(javax.jms.BytesMessage m) throws Exception {
			int size = m.getIntProperty("size");
			byte$[$] bytes = new byte$[size$];
			m.readBytes(bytes, size);

			file = File.createTempFile(id(), ".timeline");
			java.nio.file.Files.write(file.toPath(), bytes, java.nio.file.StandardOpenOption.CREATE);
			file.deleteOnExit();
			hasDirectAccessToFile = false;

			return loadFile();
		}

		private File getFile(javax.jms.TextMessage m) {
			try {
				return new File(m.getText());
			} catch(Exception e) {
				return null;
			}
		}

		private javax.jms.Message request(String mode) throws Exception {
			ActiveMQTextMessage message = new ActiveMQTextMessage();
			String command = "datamart=" + name() + ";operation=get-timeline;id=" + id() + ";mode=" + mode + ";type=" + type;
			message.setText(command);
			return message;
		}
	}
end

def type(reelNode & default) trigger(nodeImpl)

	private class ReelNodeImpl implements ReelNode {
		private final String id;
		private final String type;
		private volatile File file;
		private volatile boolean hasDirectAccessToFile;
		private volatile io.intino.sumus.chronos.ReelFile reelFile;
		private volatile ChangeListener listener;
		private volatile boolean disposed;

		private ReelNodeImpl(String id, String type) {
			this(id, type, null);
		}

		private ReelNodeImpl(String id, String type, File file) {
			this.id = requireNonNull(id);
			this.type = requireNonNull(type);
			this.file = file;
			this.hasDirectAccessToFile = file != null;
		}

		@Override
		public String id() {
			return id;
		}

		@Override
		public String type() {
			return type;
		}

		@Override
		public void dispose() {
			synchronized(this) {
				if (disposed) return;
				clearCache();
				listener = null;
				reels.remove(id + ":" + type);
				disposed = true;
			}
		}

		@Override
		public java.time.Instant start() throws ReelNotAvailableException {
			io.intino.sumus.chronos.ReelFile reelFile = reelFile();
			if (reelFile == null) return null;
			return reelFile.start();
		}

		@Override
		public io.intino.sumus.chronos.State stateOf(String signal) throws ReelNotAvailableException {
			io.intino.sumus.chronos.ReelFile reelFile = reelFile();
			return reelFile.lastStateOf(signal);
		}

		@Override
		public List<io.intino.sumus.chronos.State> stateOf(Stream<String> signals) throws ReelNotAvailableException {
			io.intino.sumus.chronos.ReelFile reelFile = reelFile();
			return signals.map(reelFile::lastStateOf).toList();
		}

		public io.intino.sumus.chronos.Shot lastShotOf(String signal) throws ReelNotAvailableException {
			io.intino.sumus.chronos.ReelFile reelFile = reelFile();
			return reelFile.lastShotOf(signal);
		}

		public List<io.intino.sumus.chronos.Shot> lastShots() throws ReelNotAvailableException {
			io.intino.sumus.chronos.ReelFile reelFile = reelFile();
			return reelFile.lastShots();
		}

		public List<io.intino.sumus.chronos.Shot> lastShots(String group) throws ReelNotAvailableException {
			io.intino.sumus.chronos.ReelFile reelFile = reelFile();
			return reelFile.lastShots(group);
		}

		public List<io.intino.sumus.chronos.Shot> lastShots(io.intino.sumus.chronos.Group group) throws ReelNotAvailableException {
			io.intino.sumus.chronos.ReelFile reelFile = reelFile();
			return reelFile.lastShots(group);
		}

		@Override
        public io.intino.sumus.chronos.Reel get(io.intino.sumus.chronos.Period period) throws ReelNotAvailableException {
        	io.intino.sumus.chronos.ReelFile reelFile = reelFile();
        	return reelFile().reel().by(period);
        }

		@Override
        public io.intino.sumus.chronos.Reel get(Instant from, Instant to, io.intino.sumus.chronos.Period period) throws ReelNotAvailableException {
        	io.intino.sumus.chronos.ReelFile reelFile = reelFile();
        	return reelFile.reel(from, to).by(period);
        }

		@Override
        public boolean exists() {
        	try {
        		return reelFile() != null;
        	} catch(ReelNotAvailableException e) {
        		return false;
        	}
        }

		private io.intino.sumus.chronos.ReelFile reelFile() throws ReelNotAvailableException {
			synchronized(this) {
				if (disposed) throw new ReelNotAvailableException("This " + getClass().getSimpleName() + " is disposed.");
				try {
					if (hasDirectAccessToFile && file != null && file.exists()) return loadFile();
					if (reelFile != null) return reelFile;
					return reelFile = downloadFromDatahub();
				} catch (Exception e) {
					throw new ReelNotAvailableException(e);
				}
			}
		}

		@Override
		public void setChangeListener(ChangeListener listener) {
			this.listener = listener;
		}

		private void notifyChange() {
			synchronized(this) {
				if (disposed) return;
				try {
					clearCache();
					if (listener != null) listener.notifyChange(this);
				} catch(Throwable ignored) {}
			}
		}

		private void clearCache() {
			reelFile = null;
			if(!hasDirectAccessToFile) file = null;
		}

		private io.intino.sumus.chronos.ReelFile loadFile() throws Exception {
			return io.intino.sumus.chronos.Reel~File.open(file);
		}

		private io.intino.sumus.chronos.ReelFile downloadFromDatahub() throws Exception {
			javax.jms.Message response = requestResponseFromDatahub("get-reel=" + id(), request("path"));
			if (!response.getBooleanProperty("success")) throw new ReelNotAvailableException("Could not get reel " + id + " because datahub returned success=false in the response");
			if (response instanceof javax.jms.TextMessage textResponse) {
				file = getFile(textResponse);
				hasDirectAccessToFile = true;
				if (file != null && file.exists()) return loadFile();
				file = null;
				hasDirectAccessToFile = false;
				response = requestResponseFromDatahub("get-reel=" + id(), request("download"));
			}
			if (!response.getBooleanProperty("success")) throw new ReelNotAvailableException("Could not get reel " + id + " because datahub returned success=false in the response");
			return readFromBytes((javax.jms.BytesMessage) response);
		}

		private io.intino.sumus.chronos.ReelFile readFromBytes(javax.jms.BytesMessage m) throws Exception {
			int size = m.getIntProperty("size");
			byte$[$] bytes = new byte$[size$];
			m.readBytes(bytes, size);
			file = File.createTempFile(id(), ".reel");
			java.nio.file.Files.write(file.toPath(), bytes, java.nio.file.StandardOpenOption.CREATE);
			file.deleteOnExit();
			hasDirectAccessToFile = false;
			return loadFile();
		}

		private File getFile(javax.jms.TextMessage m) {
			try {
				return new File(m.getText());
			} catch(Exception e) {
				return null;
			}
		}

		private javax.jms.Message request(String mode) throws Exception {
			ActiveMQTextMessage message = new ActiveMQTextMessage();
			String command = "datamart=" + name() + ";operation=get-reel;id=" + id() + ";mode=" + mode + ";type=" + type;
			message.setText(command);
			return message;
		}
	}
end