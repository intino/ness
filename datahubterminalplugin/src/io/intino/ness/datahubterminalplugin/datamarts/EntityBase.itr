def type(entity & base)
	package $package;

	import java.util.*;
	import java.util.stream.Collectors;

	import io.intino.ness.master.model.*;
	import io.intino.ness.master.reflection.*;
	import io.intino.ness.master.model.Concept.Attribute.Value;

	public class $datamart+FirstUpperCase~Entity implements Entity {

		private final String id;
		private final $datamart+FirstUpperCase~Datamart datamart;
		private final Map<String, Attribute> attributes;
		private final EntityDefinition definition;
		private List<ChangeListener> listeners;

		public $datamart+FirstUpperCase~Entity(String id, $datamart+FirstUpperCase~Datamart datamart, EntityDefinition definition) {
			this.id = id;
			this.datamart = datamart;
			this.attributes = definition.attributes().stream()
				.map(a -> new Attribute(a.name(), null))
				.collect(Collectors.toMap(a -> a.name, a -> a, (a,b) -> b, LinkedHashMap::new));
			this.attributes.put("id", new Attribute("id", id));
			this.attributes.put("enabled", new Attribute("enabled", true));
			this.definition = definition;
		}

		@Override
		public String id() {
			return id;
		}

		@Override
		public boolean enabled() {
			return attribute("enabled").value().as(Boolean.class);
		}

		@Override
		public $datamart+FirstUpperCase~Datamart datamart() {
			return datamart;
		}

		@Override
		public EntityDefinition getDefinition() {
			return definition;
		}

		@Override
		public Concept.Attribute attribute(String name) {
			return attributes.get(name);
		}

		@Override
		public List<Concept.Attribute> attributes() {
			return new ArrayList<>(attributes.values());
		}

		@Override
		public void addChangeListener(ChangeListener listener) {
			if(listener == null) throw new NullPointerException("ChangeListener cannot be null");
			if(listeners == null) listeners = new ArrayList<>(1);
			listeners.add(listener);
		}

		private static final java.util.Set<String> ExcludedAttributeNames = java.util.Set.of("id", "enabled", "ts", "ss");
		public synchronized void addAttribute(String name, Object value) {
			if(ExcludedAttributeNames.contains(name)) return;
			attributes.put(name, new Attribute(name, value));
			var attributeDefinitions = getDefinition().declaredAttributes();
			if(attributeDefinitions.stream().anyMatch(a -> a.name().equals(name))) return;
			attributeDefinitions.add(new AttributeDefinition() {
            	public String name() {return name;}
            	public Class<?> type() {return String.class;}
            	public String toString() {return name;}
            });
		}

		synchronized void updateAttribute(String name, Object newValue) {
			Attribute attribute = attributes.get(name);
			if(attribute == null) {
				addAttribute(name, newValue);
				return;
			}
			if(name.equals("id")) return;
			Value oldValue = attribute.value();
			attribute.setValue(newValue);
			if(!oldValue.equals(attribute.value())) notifyChangeListeners(attribute, oldValue);
		}

		private void notifyChangeListeners(Attribute attribute, Value oldValue) {
			if(listeners == null) return;
			for(ChangeListener listener : listeners) {
				try {listener.onChange(this, attribute, oldValue);} catch(Throwable e) {}
			}
		}

		@Override
		public boolean equals(Object o) {
			if (this == o) return true;
			if (o == null || getClass() != o.getClass()) return false;
			return id.equals(((Entity) o).id());
		}

		@Override
		public int hashCode() {
			return id.hashCode();
		}

		@Override
		public String toString() {
			return id;
		}

		public final class Attribute implements Concept.Attribute {

			private final String name;
			private Value value;
			private List<ChangeListener> listeners;

			public Attribute(String name) {
	        	this(name, null);
	        }

			public Attribute(String name, Object initialValue) {
				this.name = name;
				this.value = new Value(initialValue);
			}

			@Override
			public AttributeDefinition getDefinition() {
				return $datamart+FirstUpperCase~Entity.this.getDefinition().attribute(name).get();
			}

			@Override
	        public String name() {
	        	return name;
	        }

			@Override
			public Value value() {
				return value;
			}

			@Override
			public void addChangeListener(ChangeListener listener) {
				if(listener == null) throw new NullPointerException("ChangeListener cannot be null");
				if(listeners == null) listeners = new ArrayList<>(1);
				listeners.add(listener);
			}

			private void setValue(Object newValue) {
				Value oldValue = this.value;
				this.value = new Value(newValue);
				if(!oldValue.equals(newValue)) notifyChangeListeners(oldValue, this.value);
			}

			private void notifyChangeListeners(Value oldValue, Value newValue) {
				if(listeners == null) return;
				for(ChangeListener listener : listeners) {
					try {
						listener.onValueChange(oldValue, newValue);
					} catch(Throwable ignored) {}
				}
			}

			@Override
			public boolean equals(Object o) {
				if (this == o) return true;
				if (o == null || getClass() != o.getClass()) return false;
				Attribute other = (Attribute) o;
				return name().equals(other.name()) && type().equals(other.type()) && value.equals(other.value());
			}

			@Override
			public int hashCode() {
				return Objects.hash(name(), type(), value());
			}

			@Override
			public String toString() {
				return type().getSimpleName() + " " + name() + " = " + value();
			}
		}

		public static final class EntityDefinitionInternal implements EntityDefinition {

        	private final String entityName;

        	public EntityDefinitionInternal(String entityName) {
        		this.entityName = entityName;
        	}

        	@Override
        	public boolean isAbstract() {
        		return definition().isAbstract();
        	}

        	@Override
        	public String fullName() {
        		return definition().fullName();
        	}

        	@Override
        	public String name() {
        		return definition().name();
        	}

        	@Override
        	public List<AttributeDefinition> declaredAttributes() {
        		return definition().declaredAttributes();
        	}

        	@Override
        	public java.util.Optional<EntityDefinition> parent() {
        		return definition().parent();
        	}

        	@Override
            public List<EntityDefinition> ancestors() {
            	return definition().ancestors();
            }

        	@Override
        	public List<EntityDefinition> descendants() {
        		return definition().descendants();
        	}

        	@Override
        	public Class<?> javaClass() {
        		return definition().javaClass();
        	}

        	@Override
        	public boolean equals(Object o) {
        		if(o == null) return false;
        		if(o instanceof EntityDefinition) return o.equals(definition());
        		return false;
        	}

        	@Override
        	public int hashCode() {
        		return definition().hashCode();
        	}

        	private EntityDefinition definition() {
        		return $datamart+FirstUpperCase~Datamart.definition.entity(entityName).orElseThrow(() -> new IllegalStateException("$datamart+FirstUpperCase~Datamart is not initialized"));
        	}
        }
	}
end

def type(entityBaseReference)
	package $package;

	import io.intino.cosmos.datahub.datamarts.master.$datamart+FirstUpperCase~Entity;
	import io.intino.ness.master.Datamart;
	import io.intino.ness.master.model.Entity;
	import io.intino.ness.master.reflection.EntityDefinition;

	import java.util.List;
	import java.util.NoSuchElementException;
	import java.util.function.Supplier;

	public class $datamart+FirstUpperCase~EntityReference implements Entity {

		private final Supplier<$datamart+FirstUpperCase~Entity> entity;

		public $datamart+FirstUpperCase~EntityReference(Supplier<$datamart+FirstUpperCase~Entity> entity) {
			this.entity = entity;
		}

		@Override
		public String id() {
			return entity.get().id();
		}

		@Override
		public boolean enabled() {
			return entity.get().enabled();
		}

		@Override
		public $datamart+FirstUpperCase~Datamart datamart() {
			return entity.get().datamart();
		}

		@Override
		public Attribute attribute(String name) {
			return entity.get().attribute(name);
		}

		@Override
		public List<Attribute> attributes() {
			return entity.get().attributes();
		}

		@Override
		public void addChangeListener(ChangeListener listener) {
			entity.get().addChangeListener(listener);
		}

		@Override
		public EntityDefinition getDefinition() {
			return entity.get().getDefinition();
		}

		public final boolean isValidEntityReference() {
			try {
				return entity.get() != null;
			} catch (Throwable e) {
				return false;
			}
		}

		@Override
        public boolean equals(Object o) {
        	if (this == o) return true;
        	if (o == null || getClass() != o.getClass()) return false;
        	return id().equals(((Entity) o).id());
        }

        @Override
        public int hashCode() {
        	return entity.get().hashCode();
        }

		@Override
		public String toString() {
			return entity.get().toString();
		}

		public static class InvalidEntityReferenceException extends NoSuchElementException {
			public InvalidEntityReferenceException() {}

			public InvalidEntityReferenceException(String s, Throwable cause) {
				super(s, cause);
			}

			public InvalidEntityReferenceException(Throwable cause) {
				super(cause);
			}

			public InvalidEntityReferenceException(String s) {
				super(s);
			}
		}
	}
end