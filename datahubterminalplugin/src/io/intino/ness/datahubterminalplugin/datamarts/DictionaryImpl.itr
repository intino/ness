def type(dictionary & default) trigger(dictionaryImpl)
	private static class DictionaryImpl implements Dictionary {
		private final String name;
		private final Map<String, WordImpl> words;

		private DictionaryImpl() {
			this("", new HashMap<>(0));
		}

		private DictionaryImpl(String name, Map<String, Map<String, String>> words) {
			this.name = name;
        	this.words = words.entrySet().stream().collect(Collectors.toMap(Map.Entry::getKey, e -> new WordImpl(e.getKey(), e.getValue())));
        }

		@Override
		public Dictionary.Word get(String wordId) {
			if(wordId == null) return Dictionary.Word.wrap("");
			Dictionary.Word word = words.get(wordId);
			return word != null ? word : Dictionary.Word.wrap(wordId);
		}

		@Override
		public Stream<Dictionary.Word> words() {
			Stream stream = words.values().stream();
			return stream;
		}

		@Override
		public Set<String> languages() {
			return words.values().stream().flatMap(w -> w.languages().stream()).collect(Collectors.toSet());
		}

		private static class WordImpl implements Dictionary.Word {
			private final String id;
			private final Map<String, String> translations;

			private WordImpl(String id, Map<String, String> translations) {
				this.id = id;
				this.translations = translations;
			}

			@Override
			public String get() {
				return id;
			}

            @Override
            public Set<String> languages() {
            	return translations.keySet();
            }

            @Override
            public Optional<String> in(String language) {
            	return Optional.ofNullable(translations.get(language));
            }
		}
	}
end