def type(timelineNode & default) trigger(nodeImpl)
	private class TimelineNodeImpl implements TimelineNode {
		private final String id;
		private final String type;
		private volatile File file;
		private volatile boolean hasDirectAccessToFile;
		private volatile io.intino.sumus.chronos.TimelineStore timelineFile;
		private volatile ChangeListener listener;
		private volatile boolean disposed;

		private TimelineNodeImpl(String id, String type) {
			this(id, type, null);
		}

		private TimelineNodeImpl(String id, String type, File file) {
			this.id = requireNonNull(id);
			this.type = requireNonNull(type);
			this.file = file;
			this.hasDirectAccessToFile = file != null;
		}

		@Override
		public String id() {
			return id;
		}

		@Override
		public String type() {
			return type;
		}

		@Override
        public boolean exists() {
        	try {
        		return timelineFile() != null;
        	} catch(TimelineNotAvailableException e) {
        		return false;
        	}
        }

		@Override
		public void dispose() {
			synchronized(this) {
				if (disposed) return;
				clearCache();
				listener = null;
				timelines.remove(id + ":" + type);
				disposed = true;
			}
		}

		@Override
		public io.intino.sumus.chronos.TimelineStore.TimeModel timeModel() throws TimelineNotAvailableException {
			return timelineFile().timeModel();
		}

		@Override
		public io.intino.sumus.chronos.TimelineStore.SensorModel sensorModel() throws TimelineNotAvailableException {
			return timelineFile().sensorModel();
		}

		@Override
		public Instant first() throws TimelineNotAvailableException {
			return timelineFile().first();
		}

		@Override
		public Instant last() throws TimelineNotAvailableException {
			return timelineFile().last();
		}

		@Override
		public io.intino.sumus.chronos.Timeline get() throws TimelineNotAvailableException {
			synchronized(this) {
				if (disposed) throw new TimelineNotAvailableException("This " + getClass().getSimpleName() + " is disposed.");
				try {
					return timelineFile().timeline();
				} catch(Exception e) {
					throw new TimelineNotAvailableException(e);
				}
			}
		}

		private io.intino.sumus.chronos.TimelineStore timelineFile() throws TimelineNotAvailableException {
			synchronized(this) {
				if (disposed) throw new TimelineNotAvailableException("This " + getClass().getSimpleName() + " is disposed.");
				try {
					if (hasDirectAccessToFile && file != null && file.exists()) return loadFile();
					if (timelineFile != null) return timelineFile;
					return timelineFile = downloadFromDatahub();
				} catch(Exception e) {
					throw new TimelineNotAvailableException(e);
				}
			}
		}

		@Override
		public void setChangeListener(ChangeListener listener) {
			this.listener = listener;
		}

		private void notifyChange() {
			synchronized(this) {
				if (disposed) return;
				try {
					clearCache();
					if (listener != null) new Thread(() -> listener.notifyChange(this), "$datamart+FirstUpperCase~-TimelineNodeImpl-" + System.currentTimeMillis()).start();
				} catch(Throwable ignored) {}
			}
		}

		private void clearCache() {
			timelineFile = null;
			if(!hasDirectAccessToFile) file = null;
		}

		private io.intino.sumus.chronos.TimelineStore loadFile() throws Exception {
			return io.intino.sumus.chronos.TimelineStore.of(file);
		}

		private io.intino.sumus.chronos.TimelineStore downloadFromDatahub() throws Exception {
			jakarta.jms.Message response = requestResponseFromDatahub("get-timeline=" + id(), request(hasDirectAccessToFile ? "path" : "download"));
			if (!response.getBooleanProperty("success")) throw new TimelineNotAvailableException("Could not get timeline " + id + " because datahub returned success=false in the response");;
			if (response instanceof jakarta.jms.TextMessage textResponse) {
				file = getFile(textResponse);
				hasDirectAccessToFile = true;
				if (file != null && file.exists()) return loadFile();
				file = null;
				hasDirectAccessToFile = false;
				response = requestResponseFromDatahub("get-timeline=" + id(), request("download"));
			}
			if (!response.getBooleanProperty("success")) throw new TimelineNotAvailableException("Could not get timeline " + id + " because datahub returned success=false in the response");;
			return readFromBytes((jakarta.jms.BytesMessage) response);
		}

		private io.intino.sumus.chronos.TimelineStore readFromBytes(jakarta.jms.BytesMessage m) throws Exception {
			int size = m.getIntProperty("size");
			byte$[$] bytes = new byte$[size$];
			m.readBytes(bytes, size);

			file = File.createTempFile(id(), ".timeline");
			java.nio.file.Files.write(file.toPath(), bytes, java.nio.file.StandardOpenOption.CREATE);
			file.deleteOnExit();
			hasDirectAccessToFile = false;

			return loadFile();
		}

		private File getFile(jakarta.jms.TextMessage m) {
			try {
				return new File(m.getText());
			} catch(Exception e) {
				return null;
			}
		}

		private jakarta.jms.Message request(String mode) throws Exception {
			ActiveMQTextMessage message = new ActiveMQTextMessage();
			String command = "datamart=" + name() + ";operation=get-timeline;id=" + id() + ";mode=" + mode + ";type=" + type;
			message.setText(command);
			return message;
		}
	}
end