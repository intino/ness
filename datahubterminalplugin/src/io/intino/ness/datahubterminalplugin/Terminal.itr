def type(terminal)
	package $package+validPackage;

	import $package+validPackage.schemas.*;
	import java.util.List;

	public class $name+snakeCaseToCamelCase+firstUpperCase {

		private final io.intino.alexandria.message.MessageHub messageHub;

		public static String$[] subscriptionChannels = new String$[]{$subscribe+channel};

		public $name+snakeCaseToCamelCase+firstUpperCase(io.intino.alexandria.message.MessageHub messageHub) {
			this.messageHub = messageHub;
		}

		public io.intino.alexandria.message.MessageHub messageHub() {
			return this.messageHub;
		}

		$publish...[$NL$NL]

		$subscribe...[$NL$NL]

		$message+interface...[$NL$NL]

		public void stop() {
			//messageHub.stop();
		}
	}
end

def type(multicontext) trigger(publish)
	public void publish($type+FirstUpperCase $type+firstLowerCase, $type+FirstUpperCase.Context... contexts) {
		for ($type+FirstUpperCase.Context c : contexts)
			messageHub.sendMessage(c.qn() + ".$type", $type+firstLowerCase.get());
	}
end

def trigger(publish)
	public void publish($type+FirstUpperCase $type+firstLowerCase) {
		messageHub.sendMessage("$channel", $type+firstLowerCase.get());
	}
end

def type(multiContext) trigger(subscribe)
	public void subscribe($type+FirstUpperCase~Consumer onEventReceived, String subscriberId, $type+FirstUpperCase.Context... contexts) {
		for ($type+FirstUpperCase.Context c : contexts)
			messageHub.attachListener(c.qn() + ".$type", subscriberId, m -> onEventReceived.accept(new $type+FirstUpperCase(m)));
	}

	public void subscribe($type+FirstUpperCase~Consumer onEventReceived, $type+FirstUpperCase.Context... contexts) {
		for ($type+FirstUpperCase.Context c : contexts)
			messageHub.attachListener(c.qn() + ".$type", m -> onEventReceived.accept(new $type+FirstUpperCase(m)));
	}
end

def trigger(subscribe)
	public void subscribe($type+FirstUpperCase~Consumer onEventReceived, String subscriberId) {
		messageHub.attachListener("$channel", subscriberId, m -> onEventReceived.accept(new $type+FirstUpperCase(m)));
	}

	public void subscribe($type+FirstUpperCase~Consumer onEventReceived) {
		messageHub.attachListener("$channel", m -> onEventReceived.accept(new $type+FirstUpperCase(m)));
	}
end

def trigger(quoted)
	"$this"
end

def trigger(interface)
	public interface $name~Consumer extends java.util.function.Consumer<$name+FirstUpperCase> {
	}
end