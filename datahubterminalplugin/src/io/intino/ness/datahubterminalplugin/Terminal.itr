def type(terminal)
	package $package+validPackage;

	import io.intino.alexandria.Timetag;
	import io.intino.alexandria.Scale;
	import io.intino.alexandria.event.Event;
	import $package+validPackage.events.*;
	import java.util.List;

	public class $name+snakeCaseToCamelCase+firstUpperCase {
		private static final Scale scale = Scale.$scale;
		private final io.intino.alexandria.terminal.Connector connector;
		private java.util.Map<java.util.function.Consumer<?>, java.util.function.Consumer<io.intino.alexandria.event.Event>> consumers = new java.util.HashMap<>();
		$bpm+splits
		public static String$[] subscriptionChannels = new String$[]{$subscribe+channel};

		public $name+snakeCaseToCamelCase+firstUpperCase(io.intino.alexandria.terminal.Connector connector) {
			this.connector = connector;
		}

		public void publish(Object event, String split) {
			$publish+if...[$NL]
		}

		[$datalake
		public BatchSession batch(java.io.File dataHubStageDirectory, java.io.File temporalStageDirectory) {
			return new BatchSession(dataHubStageDirectory, temporalStageDirectory);
		}]

		public void publish(io.intino.alexandria.event.SessionEvent session) {
			connector.sendEvent(io.intino.alexandria.event.SessionEvent.PATH, session);
		}

		public void subscribe(SessionEventConsumer onEventReceived) {
			consumers.put(onEventReceived, event -> onEventReceived.accept(new io.intino.alexandria.event.SessionEvent(event.toMessage())));
			connector.attachListener(io.intino.alexandria.event.SessionEvent.PATH, consumers.get(onEventReceived));
		}

		$publish...[$NL$NL]

		$subscribe...[$NL$NL]

		private static final Object monitor = new Object();

		public class BatchSession {
			private final java.io.File dataHubStage;
			private final java.io.File temporalStage;
			private final io.intino.alexandria.ingestion.SessionHandler sessionHandler;
			private final io.intino.alexandria.ingestion.EventSession eventSession;
			private final io.intino.alexandria.ingestion.SetSession setSession;
			private final io.intino.alexandria.ingestion.TransactionSession transactionSession;

			public BatchSession(java.io.File dataHubStage, java.io.File temporalStage) {
				this.dataHubStage = dataHubStage;
				this.temporalStage = temporalStage;
				this.sessionHandler = new io.intino.alexandria.ingestion.SessionHandler(temporalStage);
				this.eventSession = sessionHandler.createEventSession();
				this.setSession = sessionHandler.createSetSession();
				this.transactionSession = sessionHandler.createTransactionSession();
			}

			public void feed(Event event, String split) {
                eventSession.put(tankOf(event, split), Timetag.of(event.ts(), scale), event);
			}

			public void feed(String tank, Timetag timetag, String set, java.util.stream.Stream<Long> ids) {
                setSession.put(tank, timetag, set, ids);
			}

			$transaction+feed...[$NL]

			public void push() {
				eventSession.close();
				setSession.close();
				sessionHandler.pushTo(this.dataHubStage);
				//connector.sendEvent("service.ness.push", new Event(new io.intino.alexandria.message.Message("Push").set("stage", temporalStage.getName())));
			}

			public synchronized void seal() {
				synchronized(monitor) {
					connector.requestResponse("service.ness.seal", new Event(new io.intino.alexandria.message.Message("Seal").set("stage", temporalStage.getName())).ts(java.time.Instant.now()).toString(), s -> {
							synchronized(monitor) {
								monitor.notify();
							}
						}
					);
					try {
						monitor.wait();
					} catch (InterruptedException e) {
						io.intino.alexandria.logger.Logger.error(e);
					}
				}
            }

            private String tankOf(Event event, String split) {
            	$publish+tankOf...[$NL]
            	return event.toMessage().type();
            }
		}

		public interface SessionEventConsumer extends java.util.function.Consumer<io.intino.alexandria.event.SessionEvent> {
		}

		$event+interface...[$NL$NL]
	}
end

def type(bpm) trigger(splits)
	public enum BpmSplit {
		$split+asEnum...[, ];

		public abstract String qn();

		public static BpmSplit splitByQn(String qn) {
			return java.util.Arrays.stream(values()).filter(c -> c.qn().equals(qn)).findFirst().orElse(null);
		}
	}
end

def trigger(asEnum)
	$value+snakeCaseToCamelCase {
		public String qn() {
			return "$qn";
		}
	}
end

def type(multisplit & bpm) trigger(if)
	if (event instanceof $type) publish(($type) event, BpmSplit.splitByQn(split));
end

def type(multisplit) trigger(if)
	if (event instanceof $type) publish(($type) event, $type.Split.splitByQn(split));
end

def trigger(if)
	if (event instanceof $type) publish(($type) event);
end

def type(multisplit) !type(bpm) trigger(tankOf)
	if (event instanceof $type) return "$typeWithNamespace." + $type.Split.splitByQn(split).qn();
end

def !type(bpm) trigger(tankOf)
	if (event instanceof $type) return "$channel";
end

def type(bpm & multisplit) trigger(publish)
	public void publish($type $typeName+firstLowerCase, BpmSplit split, BpmSplit... moreSplits) {
		connector.sendEvent("$typeWithNamespace." + split.qn(), $typeName+firstLowerCase);
		for (BpmSplit c : moreSplits) connector.sendEvent("$typeWithNamespace." + c.qn(), $typeName+firstLowerCase);
	}
end

def type(bpm) trigger(publish)
	public void publish($type $typeName+firstLowerCase) {
		connector.sendEvent("$channel", $typeName+firstLowerCase);
	}
end

def type(multisplit) !type(bpm) trigger(publish)
	public void publish($type $typeName+firstLowerCase, $type.Split split, $type.Split... moreSplits) {
		connector.sendEvent("$typeWithNamespace." + split.qn(), $typeName+firstLowerCase);
		for ($type.Split c : moreSplits)
			connector.sendEvent("$typeWithNamespace." + c.qn(), $typeName+firstLowerCase);
	}
end

def !type(bpm) trigger(publish)
	public void publish($type $typeName+firstLowerCase) {
		connector.sendEvent("$channel", $typeName+firstLowerCase);
	}
end

def type(bpm & multiSplit) trigger(subscribe)
	public void subscribe($namespaceQn+firstUpperCase$typeName+FirstUpperCase~Consumer onEventReceived, String subscriberId, BpmSplit split, BpmSplit... moreSplits) {
		consumers.put(onEventReceived, event -> onEventReceived.accept(new $type(event)));
		connector.attachListener("$typeName+FirstUpperCase." + split.qn(), subscriberId, consumers.get(onEventReceived));
		for (BpmSplit c : moreSplits)
			connector.attachListener("$typeName+FirstUpperCase." + c.qn(), subscriberId, consumers.get(onEventReceived));
	}

	public void subscribe($namespaceQn+firstUpperCase$typeName+FirstUpperCase~Consumer onEventReceived, BpmSplit split, BpmSplit... moreSplits) {
		consumers.put(onEventReceived, event -> onEventReceived.accept(new $type(event)));
		connector.attachListener("$typeName+FirstUpperCase." + split.qn(), consumers.get(onEventReceived));
		for (BpmSplit c : moreSplits)
			connector.attachListener("$typeName+FirstUpperCase." + c.qn(), consumers.get(onEventReceived));
	}

	public void unsubscribe(ProcessStatusConsumer onEventReceived) {
		connector.detachListeners(consumers.get(onEventReceived));
	}
end

def type(multiSplit) !type(bpm) trigger(subscribe)
	public void subscribe($namespaceQn+firstUpperCase$typeName+FirstUpperCase~Consumer onEventReceived, String subscriberId, $type.Split split, $type.Split... moreSplits) {
		consumers.put(onEventReceived, event -> onEventReceived.accept(new $type(event)));
		connector.attachListener("$typeWithNamespace." + split.qn(), subscriberId, consumers.get(onEventReceived));
		for ($type.Split c : moreSplits)
			connector.attachListener("$typeWithNamespace." + c.qn(), subscriberId, consumers.get(onEventReceived));
	}

	public void subscribe($namespaceQn+firstUpperCase$typeName+FirstUpperCase~Consumer onEventReceived, $type.Split split, $type.Split... moreSplits) {
		consumers.put(onEventReceived, event -> onEventReceived.accept(new $type(event)));
		connector.attachListener("$typeWithNamespace." + split.qn(), consumers.get(onEventReceived));
		for ($type.Split c : moreSplits)
			connector.attachListener("$typeWithNamespace." + c.qn(), consumers.get(onEventReceived));
	}

	public void unsubscribe($namespaceQn+firstUpperCase$typeName~Consumer onEventReceived) {
		connector.detachListeners(consumers.get(onEventReceived));
	}
end

def trigger(subscribe)
	public void subscribe($namespaceQn+firstUpperCase$typeName+FirstUpperCase~Consumer onEventReceived, String subscriberId) {
		consumers.put(onEventReceived, event -> onEventReceived.accept(new $type(event)));
		connector.attachListener("$channel", subscriberId, consumers.get(onEventReceived));
	}

	public void subscribe($namespaceQn+firstUpperCase$typeName+FirstUpperCase~Consumer onEventReceived) {
		consumers.put(onEventReceived, event -> onEventReceived.accept(new $type(event)));
		connector.attachListener("$channel", consumers.get(onEventReceived));
	}

	public void unsubscribe($namespaceQn+firstUpperCase$typeName+FirstUpperCase~Consumer onEventReceived) {
		connector.detachListeners(consumers.get(onEventReceived));
	}
end

def trigger(feed)
	public void feed$name+FirstUpperCase(String tank, Timetag timetag, java.util.function.Consumer<$qn> transaction) {
		transactionSession.put(tank, timetag, $qn.class, transaction);
	}

	public void feed$name+FirstUpperCase(String tank, Timetag timetag, java.util.stream.Stream<Consumer<$qn>> stream) {
		transactionSession.put(tank, timetag, $qn.class, stream);
	}
end

def trigger(quoted)
	"$this"
end

def trigger(interface)
	public interface $namespaceQn+firstUpperCase$name+firstUpperCase~Consumer extends java.util.function.Consumer<$type> {
	}
end