def type(root)
	package $package+ValidPackage;

	$schema
end

def trigger(schema)
	public [$inner] class $name+firstUpperCase [extends $parent] implements java.io.Serializable {
		$context
		[$parent+delegate?io.intino.alexandria.message.Message message;]
		[$attribute+declaration...[$NL]]
		[$schema+declaration...[$NL]]

		public $name+firstUpperCase() {
			[$parent+superEmpty?this.message = new io.intino.alexandria.message.Message(this.getClass().getSimpleName());]
		}

		public $name+firstUpperCase(io.intino.alexandria.message.Message message) {
			[$parent+super?this.message = message;]
		}

		$attribute+getter...[$NL$NL]

		$attribute+setter...[$NL$NL]


		public io.intino.alexandria.message.Message get() {
			return this.message;
		}

		[$schema...[$NL$NL]]
	}
end

def trigger(context)
	public enum Context {
		$enum+asEnum...[, ];

		public abstract String qn();
	}
end

def trigger(asEnum)
	$value {
		public String qn() {
			return ["$parent." +] this.name();
		}
	}
end

def trigger(superEmpty)
	super();
end

def trigger(super)
	super(message);
end
def trigger(delegate)
	;

end

def type(word & single) trigger(declaration)
	public enum $name+FirstUpperCase {
		$words...[, ]
	}

end

def type(word & multiple) trigger(declaration)
	public enum $name+FirstUpperCase {
		$words...[, ]
	}

end

def !type(primitive) type(member)trigger(declaration)
	private java.util.List<$type> $name+firstLowerCase~List = null;
end

def type(word & single) trigger(getter)
	public $name+FirstUpperCase $name+FirstLowerCase() {
		return !message.contains("$name+FirstLowerCase") ? null : $name+FirstUpperCase.valueOf(message.get("$name+FirstLowerCase").asString());
	}
end

def type(word & multiple) trigger(getter)
	public java.util.List<$type+FirstUpperCase> $name+FirstLowerCase() {
		if (!message.contains("$name+FirstLowerCase")) return java.util.Collections.emptyList();
		return java.util.Collections.unmodifiableList(java.util.Arrays.asList(message.get("$name+FirstLowerCase").as(String$[].class)).map(v -> $name+FirstUpperCase.valueOf(v)).collect(java.util.stream.Collectors.toList()));
	}
end

def type(primitive & single) trigger(getter)
	public $type $name+firstLowerCase() {
		return !message.contains("$name+FirstLowerCase") ? $defaultValue : message.get("$name+FirstLowerCase").as$simpleType();
	}
end

def type(primitive & multiple) trigger(getter)
	public java.util.List<$type> $name+firstLowerCase() {
		return !message.contains("$name+FirstLowerCase") ? java.util.Collections.emptyList() : java.util.Collections.unmodifiableList(java.util.Arrays.asList(message.get("$name+FirstLowerCase").as($type$[].class)));
	}
end

def type(word & single) trigger(setter)
	public $element+firstUpperCase $name+firstLowerCase($type+FirstUpperCase $name+firstLowerCase) {
		if ($name+firstLowerCase == null) this.message.remove("$name+firstLowerCase");
		else this.message.set("$name+firstLowerCase", $name+firstLowerCase.name());
		return this;
	}
end
def type(word & multiple) trigger(setter)
	public $element+firstUpperCase $name+firstLowerCase(java.util.List<$type+FirstUpperCase> $name+firstLowerCase) {
		this.message.remove("$name+firstLowerCase");
		$name+firstLowerCase.forEach(v -> this.message.append("$name+firstLowerCase", v.name()));
		return this;
	}
end

def type(primitive & single) type(integer | double) trigger(setter)
	public $element+firstUpperCase $name+firstLowerCase($type $name+firstLowerCase) {
		this.message.set("$name+firstLowerCase", $name+firstLowerCase);
		return this;
	}
end

def type(primitive & single) trigger(setter)
	public $element+firstUpperCase $name+firstLowerCase($type $name+firstLowerCase) {
		if ($name+firstLowerCase == null) this.message.remove("$name+firstLowerCase");
		else this.message.set("$name+firstLowerCase", $name+firstLowerCase);
		return this;
	}
end

def type(primitive & multiple) trigger(setter)
	public $element+firstUpperCase $name+firstLowerCase(java.util.List<$type> $name+firstLowerCase) {
		this.message.remove("$name+firstLowerCase");
		$name+firstLowerCase.forEach(v -> this.message.append("$name+firstLowerCase", v));
		return this;
	}
end


def !type(primitive) !type(single) trigger(getter)
	public java.util.List<$type> $name+firstLowerCase~List() {
		java.util.List<io.intino.alexandria.message.Message> components = message.components("$name");
        		if (this.$name+firstLowerCase~List != null) return this.$name+firstLowerCase~List;
        		return this.$name+firstLowerCase~List = new java.util.ArrayList<$type>(components.stream().map(c -> new $type(c)).collect(java.util.stream.Collectors.toList())) {
        			@Override
        			public boolean add($type element) {
        				super.add(element);
        				message.add(element.get());
        				return true;
        			}

        			@Override
        			public void add(int index, $type element) {
        				throw new UnsupportedOperationException();
        			}

        			@Override
        			public boolean remove(Object o) {
        				if (!(o instanceof $type)) return false;
        				super.remove(o);
        				message.remove((($type) o).get());
        				return true;
        			}

        			@Override
        			public $type remove(int index) {
        				$type type = get(index);
        				remove(type);
        				return type;
        			}

        			@Override
        			public boolean removeAll(java.util.Collection<?> c) {
        				c.forEach(this::remove);
        				return true;
        			}

        			@Override
        			public boolean addAll(java.util.Collection<? extends $type> c) {
        				c.forEach(this::add);
        				return true;
        			}

        			@Override
        			public boolean addAll(int index, java.util.Collection<? extends $type> c) {
        				throw new UnsupportedOperationException();
        			}
        		};
	}
end

def !type(primitive) type(single) trigger(getter)
	public $type $name+firstLowerCase() {
		java.util.List<io.intino.alexandria.message.Message> components = message.components("$name");
		return components.isEmpty() ? null : new $type(components.get(0));
	}
end

def !type(primitive) type(single) trigger(setter)
	public $element+firstUpperCase $name+firstLowerCase($type+firstUpperCase $name+firstLowerCase) {
		this.message.components("$type").forEach(v -> this.message.remove(v));
		if ($name+firstLowerCase != null) this.message.add($name+firstLowerCase.get());
		return this;
	}
end

def type(multiple & member) trigger(setter)
	public $element+firstUpperCase $name+firstLowerCase~List(java.util.List<$type+firstUpperCase> $name+firstLowerCase) {
		this.message.components("$type").forEach(v -> this.message.remove(v));
		$name+firstLowerCase.forEach(v -> this.message.add(v.get()));
		return this;
	}
end