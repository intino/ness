def type(root)
	package $package+ValidPackage;

	$schema
end

def trigger(schema)
	public [$inner] class $name+firstUpperCase [extends $parent] implements java.io.Serializable {
		[$parent+delegate?io.intino.alexandria.message.Message message;]
		$attribute+declaration...[$NL]

		public $name+firstUpperCase() {
			[$parent+superEmpty?this.message = new io.intino.alexandria.message.Message(this.getClass().getSimpleName());]
		}

		public $name+firstUpperCase(io.intino.alexandria.message.Message message) {
			[$parent+super?this.message = message;]
		}

		$attribute+getter...[$NL$NL]

		$attribute+setter...[$NL$NL]


		public io.intino.alexandria.message.Message get() {
			return this.message;
		}

		[$schema...[$NL$NL]]
	}
end

def trigger(superEmpty)
	super();
end

def trigger(super)
	super(message);
end
def trigger(delegate)
	;

end

def type(word & single) trigger(declaration)
	public enum $name+FirstUpperCase {
		$words...[, ]
	}

end

def type(word & multiple) trigger(declaration)
	public enum $name+FirstUpperCase {
		$words...[, ]
	}

end

def type(word & single) trigger(getter)
	public $name+FirstUpperCase $name+FirstLowerCase() {
		return !message.contains("$name+FirstLowerCase") ? null : $name+FirstUpperCase.valueOf(message.get("$name+FirstLowerCase").as(String.class));
	}
end

def type(word & multiple) trigger(getter)
	public java.util.List<$type+FirstUpperCase> $name+FirstLowerCase() {
		return java.util.Arrays.asList(message.get("$name+FirstLowerCase").as(String$[].class)).map(v -> $name+FirstUpperCase.valueOf(v)).collect(java.util.Collectors.toList());
	}
end

def type(primitive & single) trigger(getter)
	public $type $name+firstLowerCase() {
		return !message.contains("$name+FirstLowerCase") ? $defaultValue : message.get("$name+FirstLowerCase").as($type.class);
	}
end

def type(primitive & multiple) trigger(getter)
	public java.util.List<$type> $name+firstLowerCase() {
		return !message.contains("$name+FirstLowerCase") ? java.util.Collections.emptyList() : java.util.Arrays.asList(message.get("$name+FirstLowerCase").as($type$[].class));
	}
end

def type(word & single) trigger(setter)
	public $element+firstUpperCase $name+firstLowerCase($type+FirstUpperCase $name+firstLowerCase) {
		if ($name+firstLowerCase == null) this.message.remove("$name+firstLowerCase");
		else this.message.set("$name+firstLowerCase", $name+firstLowerCase.name());
		return this;
	}
end
def type(word & multiple) trigger(setter)
	public $element+firstUpperCase $name+firstLowerCase(java.util.List<$type+FirstUpperCase> $name+firstLowerCase) {
		this.message.remove("$name+firstLowerCase");
		$name+firstLowerCase.forEach(v -> this.message.append("$name+firstLowerCase", v.name()));
		return this;
	}
end

def type(primitive & single) trigger(setter)
	public $element+firstUpperCase $name+firstLowerCase($type $name+firstLowerCase) {
		this.message.set("$name+firstLowerCase", $name+firstLowerCase);
		return this;
	}
end

def type(primitive & multiple) trigger(setter)
	public $element+firstUpperCase $name+firstLowerCase(java.util.List<$type> $name+firstLowerCase) {
		this.message.remove("$name+firstLowerCase");
		$name+firstLowerCase.forEach(v -> this.message.append("$name+firstLowerCase", v));
		return this;
	}
end


def !type(primitive) !type(single) trigger(getter)
	public java.util.List<$type> $name+firstLowerCase() {
		java.util.List<io.intino.alexandria.message.Message> components = message.components("$name");
		return components.stream().map(v -> new $type(v)).collect(java.util.stream.Collectors.toList());
	}
end

def !type(primitive) type(single) trigger(getter)
	public $type $name+firstLowerCase() {
		java.util.List<io.intino.alexandria.message.Message> components = message.components("$name");
		return components.isEmpty() ? null : new $type(components.get(0));
	}
end

def !type(primitive) type(single) trigger(setter)
	public $element+firstUpperCase $name+firstLowerCase($type+firstUpperCase $name+firstLowerCase) {
		this.message.components("$type").forEach(v -> this.message.remove(v));
		if ($name+firstLowerCase != null) this.message.add($name+firstLowerCase.get());
		return this;
	}
end

def type(multiple & member) trigger(setter)
	public $element+firstUpperCase $name+firstLowerCase~List(java.util.List<$type+firstUpperCase> $name+firstLowerCase) {
		this.message.components("$type").forEach(v -> this.message.remove(v));
		$name+firstLowerCase.forEach(v -> this.message.add(v.get()));
		return this;
	}
end