def type(measurement)
	package $package+ValidPackage;

	public class $name+firstUpperCase extends io.intino.alexandria.event.measurement.MeasurementEvent implements java.io.Serializable {

		private static final String$[] declaredMeasurements = new String$[]{$value+nameQuoted...[, ]};

		public $name+firstUpperCase(String sensor) {
			super("$name+firstUpperCase", sensor, java.time.Instant.now(), declaredMeasurements, new double$[$size]);
		}

		public $name+firstUpperCase(String sensor, java.time.Instant ts) {
			super("$name+firstUpperCase", sensor, ts, declaredMeasurements, new double$[$size]);
		}

		public $name+firstUpperCase(io.intino.alexandria.message.Message message) {
			super("$name+firstUpperCase", message.get("ss").asString(), message.get("ts").asInstant(), message.get("measurements").as(String$[].class), java.util.Arrays.stream(message.get("values").as(String$[].class)).mapToDouble(Double::parseDouble).toArray());
		}

		[$value+getter...[$NL$NL]]

		[$value+setter...[$NL$NL]]

		public io.intino.alexandria.event.message.MessageEvent toMessageEvent() {
			io.intino.alexandria.message.Message message = new io.intino.alexandria.message.Message(this.getClass().getSimpleName());
			message.set("ts", this.ts);
			message.set("ss", this.source);
			java.util.Arrays.stream(measurements).forEach(m -> message.append("measurements", m));
			java.util.Arrays.stream(values).forEach(m -> message.append("values", m));
			return new io.intino.alexandria.event.message.MessageEvent(message);
		}
	}
end

def trigger(nameQuoted)
	"$name"
end

def trigger(getter)
	public double $name+firstLowerCase() {
		return values$[$index];
	}
end

def trigger(setter)
	public $owner+FirstUpperCase $name+firstLowerCase(double value) {
		values$[$index] = value;
		return this;
	}
end